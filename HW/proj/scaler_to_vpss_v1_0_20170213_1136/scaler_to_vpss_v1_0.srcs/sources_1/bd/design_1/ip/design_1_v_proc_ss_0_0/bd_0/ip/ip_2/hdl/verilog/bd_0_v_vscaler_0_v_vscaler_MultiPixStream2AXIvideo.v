// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0_v_vscaler_0_v_vscaler_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        StrmMPix_V_val_V_dout,
        StrmMPix_V_val_V_empty_n,
        StrmMPix_V_val_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        WidthOut
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_pp0_stg0_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv13_1FFF = 13'b1111111111111;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] StrmMPix_V_val_V_dout;
input   StrmMPix_V_val_V_empty_n;
output   StrmMPix_V_val_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [11:0] Height;
input  [11:0] WidthOut;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg StrmMPix_V_val_V_read;
reg m_axis_video_TVALID;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
reg   [11:0] j_i_reg_137;
reg    ap_sig_bdd_52;
wire   [11:0] grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return;
reg   [11:0] tmp_i_reg_232;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_64;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done;
wire   [11:0] grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return;
reg   [11:0] tmp_i_49_reg_237;
wire   [12:0] tmp_31_i_fu_169_p2;
reg   [12:0] tmp_31_i_reg_242;
wire   [0:0] exitcond3_i_fu_175_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_84;
wire   [11:0] i_fu_180_p2;
reg   [11:0] i_reg_251;
wire   [0:0] exitcond4_i_fu_190_p2;
reg   [0:0] exitcond4_i_reg_256;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_3;
reg    ap_sig_bdd_95;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_103;
reg    ap_sig_ioackin_m_axis_video_TREADY;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [11:0] j_fu_195_p2;
wire   [0:0] axi_last_V_fu_201_p2;
reg   [0:0] axi_last_V_reg_265;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_idle;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready;
wire   [11:0] grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_idle;
wire    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready;
wire   [11:0] grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r;
reg   [11:0] i_i_reg_126;
reg    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg = 1'b0;
reg    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg = 1'b0;
reg   [0:0] tmp_user_V_fu_74;
reg    ap_reg_ioackin_m_axis_video_TREADY = 1'b0;
wire   [12:0] cols_cast_i_fu_165_p1;
wire   [12:0] j_cast_i_fu_186_p1;
reg   [3:0] ap_NS_fsm;


bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s grp_v_vscaler_reg_unsigned_short_s_fu_148(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start ),
    .ap_done( grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done ),
    .ap_idle( grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_idle ),
    .ap_ready( grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready ),
    .in_r( grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r ),
    .ap_return( grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return )
);

bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s grp_v_vscaler_reg_unsigned_short_s_fu_154(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start ),
    .ap_done( grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done ),
    .ap_idle( grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_idle ),
    .ap_ready( grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready ),
    .in_r( grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r ),
    .ap_return( grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond3_i_fu_175_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_m_axis_video_TREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
            ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_logic_1 == m_axis_video_TREADY))) begin
            ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond3_i_fu_175_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond3_i_fu_175_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_fu_190_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_52)) begin
            grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready)) begin
            grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_52)) begin
            grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready)) begin
            grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
        i_i_reg_126 <= i_reg_251;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) | (ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done)))) begin
        i_i_reg_126 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond3_i_fu_175_p2 == ap_const_lv1_0))) begin
        j_i_reg_137 <= ap_const_lv12_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
        j_i_reg_137 <= j_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        tmp_user_V_fu_74 <= ap_const_lv1_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_52)) begin
        tmp_user_V_fu_74 <= ap_const_lv1_1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
        axi_last_V_reg_265 <= axi_last_V_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond4_i_reg_256 <= exitcond4_i_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_251 <= i_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) | (ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done)))) begin
        tmp_31_i_reg_242 <= tmp_31_i_fu_169_p2;
        tmp_i_49_reg_237 <= grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return;
        tmp_i_reg_232 <= grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return;
    end
end

always @ (exitcond4_i_reg_256 or ap_sig_cseq_ST_pp0_stg0_fsm_3 or ap_sig_bdd_103 or ap_sig_ioackin_m_axis_video_TREADY or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        StrmMPix_V_val_V_read = ap_const_logic_1;
    end else begin
        StrmMPix_V_val_V_read = ap_const_logic_0;
    end
end

always @ (ap_done_reg or exitcond3_i_fu_175_p2 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond3_i_fu_175_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (exitcond3_i_fu_175_p2 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond3_i_fu_175_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_95) begin
    if (ap_sig_bdd_95) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_23) begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_64) begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (m_axis_video_TREADY or ap_reg_ioackin_m_axis_video_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axis_video_TREADY)) begin
        ap_sig_ioackin_m_axis_video_TREADY = m_axis_video_TREADY;
    end else begin
        ap_sig_ioackin_m_axis_video_TREADY = ap_const_logic_1;
    end
end

always @ (exitcond4_i_reg_256 or ap_sig_cseq_ST_pp0_stg0_fsm_3 or ap_sig_bdd_103 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_m_axis_video_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_3) & (exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_logic_0 == ap_reg_ioackin_m_axis_video_TREADY))) begin
        m_axis_video_TVALID = ap_const_logic_1;
    end else begin
        m_axis_video_TVALID = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_52 or grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done or grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done or exitcond3_i_fu_175_p2 or exitcond4_i_fu_190_p2 or exitcond4_i_reg_256 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_103 or ap_sig_ioackin_m_axis_video_TREADY or ap_reg_ppiten_pp0_it1) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_52) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~((ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) | (ap_const_logic_0 == grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond3_i_fu_175_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end
        end
        ap_ST_pp0_stg0_fsm_3 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 | ((exitcond4_i_reg_256 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_m_axis_video_TREADY))) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_fu_190_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (StrmMPix_V_val_V_empty_n or exitcond4_i_reg_256) begin
    ap_sig_bdd_103 = ((StrmMPix_V_val_V_empty_n == ap_const_logic_0) & (exitcond4_i_reg_256 == ap_const_lv1_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_52 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_95 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign axi_last_V_fu_201_p2 = (j_cast_i_fu_186_p1 == tmp_31_i_reg_242? 1'b1: 1'b0);

assign cols_cast_i_fu_165_p1 = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return;

assign exitcond3_i_fu_175_p2 = (i_i_reg_126 == tmp_i_reg_232? 1'b1: 1'b0);

assign exitcond4_i_fu_190_p2 = (j_i_reg_137 == tmp_i_49_reg_237? 1'b1: 1'b0);

assign grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start = grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg;

assign grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r = Height;

assign grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg;

assign grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r = WidthOut;

assign i_fu_180_p2 = (i_i_reg_126 + ap_const_lv12_1);

assign j_cast_i_fu_186_p1 = j_i_reg_137;

assign j_fu_195_p2 = (j_i_reg_137 + ap_const_lv12_1);

assign m_axis_video_TDATA = StrmMPix_V_val_V_dout;

assign m_axis_video_TDEST = ap_const_lv1_0;

assign m_axis_video_TID = ap_const_lv1_0;

assign m_axis_video_TKEEP = ap_const_lv3_7;

assign m_axis_video_TLAST = axi_last_V_reg_265;

assign m_axis_video_TSTRB = ap_const_lv3_0;

assign m_axis_video_TUSER = tmp_user_V_fu_74;

assign tmp_31_i_fu_169_p2 = ($signed(cols_cast_i_fu_165_p1) + $signed(ap_const_lv13_1FFF));


endmodule //bd_0_v_vscaler_0_v_vscaler_MultiPixStream2AXIvideo

