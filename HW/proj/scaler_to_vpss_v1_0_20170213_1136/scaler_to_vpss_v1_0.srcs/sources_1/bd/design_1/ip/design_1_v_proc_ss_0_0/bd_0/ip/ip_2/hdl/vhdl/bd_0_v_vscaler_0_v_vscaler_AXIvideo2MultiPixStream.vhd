-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_0_v_vscaler_0_v_vscaler_AXIvideo2MultiPixStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_V_val_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_V_val_V_full_n : IN STD_LOGIC;
    img_V_val_V_write : OUT STD_LOGIC;
    Height : IN STD_LOGIC_VECTOR (11 downto 0);
    WidthIn : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of bd_0_v_vscaler_0_v_vscaler_AXIvideo2MultiPixStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_pp1_stg0_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st9_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal eol_reg_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_reg_159 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_182 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_2_i_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_206 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_bdd_66 : BOOLEAN;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_reg_330 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_78 : BOOLEAN;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_done : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_done : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_50_reg_335 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_data_V_reg_340 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal tmp_last_V_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_i_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal i_fu_289_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_364 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_i_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_i_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal brmerge_i_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_136 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_fu_300_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_idle : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_ready : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_idle : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_ready : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_3_i_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_i_reg_117 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_196 : BOOLEAN;
    signal axi_data_V_3_i_reg_231 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V1_i_reg_127 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_i_reg_137 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_phi_fu_151_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_phi_fu_162_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_phi_fu_174_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_i_reg_193pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_206pp1_it0 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_2_i_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal sof_1_i_fu_76 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_275_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_sig_bdd_219 : BOOLEAN;
    signal ap_sig_bdd_147 : BOOLEAN;

    component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_v_vscaler_reg_unsigned_short_s_fu_253 : component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start,
        ap_done => grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_done,
        ap_idle => grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_idle,
        ap_ready => grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_ready,
        in_r => grp_v_vscaler_reg_unsigned_short_s_fu_253_in_r,
        ap_return => grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_return);

    grp_v_vscaler_reg_unsigned_short_s_fu_259 : component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start,
        ap_done => grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_done,
        ap_idle => grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_idle,
        ap_ready => grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_ready,
        in_r => grp_v_vscaler_reg_unsigned_short_s_fu_259_in_r,
        ap_return => grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((exitcond6_i_fu_284_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_fu_295_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg assign process. --
    grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_66))) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_ready)) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg assign process. --
    grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_66))) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_ready)) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_i_reg_127 assign process. --
    axi_data_V1_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                axi_data_V1_i_reg_127 <= tmp_data_V_reg_340;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then 
                axi_data_V1_i_reg_127 <= axi_data_V_3_i_reg_231;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_i_reg_159 assign process. --
    axi_data_V_1_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_i_reg_159 <= p_Val2_s_reg_206;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_i_reg_159 <= axi_data_V1_i_reg_127;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_i_reg_231 assign process. --
    axi_data_V_3_i_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_i_reg_231 <= axi_data_V_1_i_phi_fu_162_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6) and (ap_const_lv1_0 = eol_2_i_reg_243) and not(ap_sig_bdd_160))) then 
                axi_data_V_3_i_reg_231 <= s_axis_video_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_i_reg_117 assign process. --
    axi_last_V1_i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                axi_last_V1_i_reg_117 <= tmp_last_V_reg_348;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then 
                axi_last_V1_i_reg_117 <= axi_last_V_3_i_reg_219;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_i_reg_193 assign process. --
    axi_last_V_2_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_147) then
                if (ap_sig_bdd_219) then 
                    axi_last_V_2_i_reg_193 <= eol_phi_fu_151_p4;
                elsif (ap_sig_bdd_128) then 
                    axi_last_V_2_i_reg_193 <= s_axis_video_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_i_reg_193 <= ap_reg_phiprechg_axi_last_V_2_i_reg_193pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_i_reg_219 assign process. --
    axi_last_V_3_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_i_reg_219 <= eol_phi_fu_151_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6) and (ap_const_lv1_0 = eol_2_i_reg_243) and not(ap_sig_bdd_160))) then 
                axi_last_V_3_i_reg_219 <= s_axis_video_TLAST;
            end if; 
        end if;
    end process;

    -- eol_2_i_reg_243 assign process. --
    eol_2_i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0)))) then 
                eol_2_i_reg_243 <= eol_i_phi_fu_174_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6) and (ap_const_lv1_0 = eol_2_i_reg_243) and not(ap_sig_bdd_160))) then 
                eol_2_i_reg_243 <= s_axis_video_TLAST;
            end if; 
        end if;
    end process;

    -- eol_i_reg_170 assign process. --
    eol_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_i_reg_170 <= axi_last_V_2_i_reg_193;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then 
                eol_i_reg_170 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- eol_reg_148 assign process. --
    eol_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_148 <= axi_last_V_2_i_reg_193;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then 
                eol_reg_148 <= axi_last_V1_i_reg_117;
            end if; 
        end if;
    end process;

    -- i_i_reg_137 assign process. --
    i_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_i_reg_137 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_7)) then 
                i_i_reg_137 <= i_reg_364;
            end if; 
        end if;
    end process;

    -- j_i_reg_182 assign process. --
    j_i_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                j_i_reg_182 <= j_fu_300_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then 
                j_i_reg_182 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_206 assign process. --
    p_Val2_s_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_147) then
                if (ap_sig_bdd_219) then 
                    p_Val2_s_reg_206 <= axi_data_V_1_i_phi_fu_162_p4;
                elsif (ap_sig_bdd_128) then 
                    p_Val2_s_reg_206 <= s_axis_video_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_206 <= ap_reg_phiprechg_p_Val2_s_reg_206pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- sof_1_i_fu_76 assign process. --
    sof_1_i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_i_fu_76 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                sof_1_i_fu_76 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond7_i_reg_369 <= exitcond7_i_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_reg_364 <= i_fu_289_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((s_axis_video_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_340 <= s_axis_video_TDATA;
                tmp_last_V_reg_348 <= s_axis_video_TLAST;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_done) or (ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_done))))) then
                tmp_i_50_reg_335 <= grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_return;
                tmp_i_reg_330 <= grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_return;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, s_axis_video_TVALID, ap_sig_bdd_66, grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_done, grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_done, exitcond6_i_fu_284_p2, exitcond7_i_fu_295_p2, ap_sig_bdd_129, ap_reg_ppiten_pp1_it0, ap_sig_bdd_136, ap_reg_ppiten_pp1_it1, ap_sig_bdd_160, eol_2_i_reg_243, tmp_user_V_fu_275_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_66)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_done) or (ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not((s_axis_video_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_275_p1))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((s_axis_video_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_275_p1)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((exitcond6_i_fu_284_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond7_i_fu_295_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                if (((ap_const_lv1_0 = eol_2_i_reg_243) and not(ap_sig_bdd_160))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                elsif ((not(ap_sig_bdd_160) and not((ap_const_lv1_0 = eol_2_i_reg_243)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                end if;
            when ap_ST_st9_fsm_7 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond6_i_fu_284_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((exitcond6_i_fu_284_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond6_i_fu_284_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((exitcond6_i_fu_284_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_i_reg_193pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_206pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(exitcond7_i_fu_295_p2, brmerge_i_fu_309_p2)
    begin
                ap_sig_bdd_128 <= ((exitcond7_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_fu_309_p2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(s_axis_video_TVALID, exitcond7_i_fu_295_p2, brmerge_i_fu_309_p2)
    begin
                ap_sig_bdd_129 <= ((s_axis_video_TVALID = ap_const_logic_0) and (exitcond7_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_fu_309_p2));
    end process;


    -- ap_sig_bdd_136 assign process. --
    ap_sig_bdd_136_assign_proc : process(img_V_val_V_full_n, exitcond7_i_reg_369)
    begin
                ap_sig_bdd_136 <= ((img_V_val_V_full_n = ap_const_logic_0) and (exitcond7_i_reg_369 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_147 assign process. --
    ap_sig_bdd_147_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_sig_bdd_129, ap_reg_ppiten_pp1_it0, ap_sig_bdd_136, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_147 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(s_axis_video_TVALID, eol_2_i_reg_243)
    begin
                ap_sig_bdd_160 <= ((s_axis_video_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_2_i_reg_243));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_196 assign process. --
    ap_sig_bdd_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_196 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(exitcond7_i_fu_295_p2, brmerge_i_fu_309_p2)
    begin
                ap_sig_bdd_219 <= ((exitcond7_i_fu_295_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_i_fu_309_p2)));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_66 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_78 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_5_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_78)
    begin
        if (ap_sig_bdd_78) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_196)
    begin
        if (ap_sig_bdd_196) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_7 assign process. --
    ap_sig_cseq_ST_st9_fsm_7_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st9_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_i_phi_fu_162_p4 assign process. --
    axi_data_V_1_i_phi_fu_162_p4_assign_proc : process(axi_data_V_1_i_reg_159, p_Val2_s_reg_206, exitcond7_i_reg_369, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_i_phi_fu_162_p4 <= p_Val2_s_reg_206;
        else 
            axi_data_V_1_i_phi_fu_162_p4 <= axi_data_V_1_i_reg_159;
        end if; 
    end process;

    brmerge_i_fu_309_p2 <= (sof_1_i_fu_76 or eol_i_phi_fu_174_p4);

    -- eol_i_phi_fu_174_p4 assign process. --
    eol_i_phi_fu_174_p4_assign_proc : process(eol_i_reg_170, axi_last_V_2_i_reg_193, exitcond7_i_reg_369, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_i_phi_fu_174_p4 <= axi_last_V_2_i_reg_193;
        else 
            eol_i_phi_fu_174_p4 <= eol_i_reg_170;
        end if; 
    end process;


    -- eol_phi_fu_151_p4 assign process. --
    eol_phi_fu_151_p4_assign_proc : process(eol_reg_148, axi_last_V_2_i_reg_193, exitcond7_i_reg_369, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_151_p4 <= axi_last_V_2_i_reg_193;
        else 
            eol_phi_fu_151_p4 <= eol_reg_148;
        end if; 
    end process;

    exitcond6_i_fu_284_p2 <= "1" when (i_i_reg_137 = tmp_i_reg_330) else "0";
    exitcond7_i_fu_295_p2 <= "1" when (j_i_reg_182 = tmp_i_50_reg_335) else "0";
    grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start <= grp_v_vscaler_reg_unsigned_short_s_fu_253_ap_start_ap_start_reg;
    grp_v_vscaler_reg_unsigned_short_s_fu_253_in_r <= Height;
    grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start <= grp_v_vscaler_reg_unsigned_short_s_fu_259_ap_start_ap_start_reg;
    grp_v_vscaler_reg_unsigned_short_s_fu_259_in_r <= WidthIn;
    i_fu_289_p2 <= std_logic_vector(unsigned(i_i_reg_137) + unsigned(ap_const_lv12_1));
    img_V_val_V_din <= p_Val2_s_reg_206;

    -- img_V_val_V_write assign process. --
    img_V_val_V_write_assign_proc : process(exitcond7_i_reg_369, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_sig_bdd_129, ap_reg_ppiten_pp1_it0, ap_sig_bdd_136, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_V_val_V_write <= ap_const_logic_1;
        else 
            img_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_300_p2 <= std_logic_vector(unsigned(j_i_reg_182) + unsigned(ap_const_lv12_1));

    -- s_axis_video_TREADY assign process. --
    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, ap_sig_cseq_ST_st3_fsm_2, exitcond7_i_fu_295_p2, ap_sig_cseq_ST_pp1_stg0_fsm_5, brmerge_i_fu_309_p2, ap_sig_bdd_129, ap_reg_ppiten_pp1_it0, ap_sig_bdd_136, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st8_fsm_6, ap_sig_bdd_160, eol_2_i_reg_243)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((s_axis_video_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6) and (ap_const_lv1_0 = eol_2_i_reg_243) and not(ap_sig_bdd_160)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (exitcond7_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_fu_309_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_136 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_user_V_fu_275_p1 <= s_axis_video_TUSER;
end behav;
