-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_0_v_hscaler_0_v_hscaler_AXIvideo2MultiPixStream83 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_V_val_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_V_val_V_full_n : IN STD_LOGIC;
    img_V_val_V_write : OUT STD_LOGIC;
    Height : IN STD_LOGIC_VECTOR (15 downto 0);
    WidthIn : IN STD_LOGIC_VECTOR (15 downto 0);
    colorMode : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_WidthOut : IN STD_LOGIC_VECTOR (15 downto 0);
    Height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    Height_out_full_n : IN STD_LOGIC;
    Height_out_write : OUT STD_LOGIC;
    WidthIn_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    WidthIn_out_full_n : IN STD_LOGIC;
    WidthIn_out_write : OUT STD_LOGIC;
    colorMode_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    colorMode_out_full_n : IN STD_LOGIC;
    colorMode_out_write : OUT STD_LOGIC;
    HwReg_WidthOut_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    HwReg_WidthOut_out_full_n : IN STD_LOGIC;
    HwReg_WidthOut_out_write : OUT STD_LOGIC );
end;


architecture behav of bd_0_v_hscaler_0_v_hscaler_AXIvideo2MultiPixStream83 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_i_reg_233 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_i_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_i_reg_256 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_2_i_i_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_280 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_bdd_91 : BOOLEAN;
    signal tmp_fu_336_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_464 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_data_V_reg_469 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal tmp_last_V_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_344_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_34_reg_489 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal sel_tmp2_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal i_fu_366_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_505 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_i_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i_i_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal brmerge_i_i_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_149 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_fu_381_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_val_0_V_2_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_0_V_2_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_1_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_1_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_1_fu_434_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_1_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_181 : BOOLEAN;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal axi_last_V1_i_i_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_3_i_i_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal axi_data_V1_i_i_reg_201 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V_3_i_i_reg_304 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_i_i_reg_211 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_phi_fu_225_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_i_phi_fu_236_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_i_phi_fu_248_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_i_i_reg_267pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_phi_fu_284_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_2_i_i_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_i_i_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_i_i_fu_357_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_i_i_fu_372_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal pix_val_0_V_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_2_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_fu_417_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_340_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_148 : BOOLEAN;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal ap_sig_bdd_247 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond_i_i_fu_361_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_i_i_reg_201 assign process. --
    axi_data_V1_i_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_i_i_reg_201 <= axi_data_V_3_i_i_reg_304;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_i_i_reg_201 <= tmp_data_V_reg_469;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_i_i_reg_233 assign process. --
    axi_data_V_1_i_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_i_i_reg_233 <= p_Val2_s_reg_280;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_i_i_reg_233 <= axi_data_V1_i_i_reg_201;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_i_i_reg_304 assign process. --
    axi_data_V_3_i_i_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_i_i_reg_304 <= axi_data_V_1_i_i_phi_fu_236_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_i_reg_316) and not(ap_sig_bdd_186))) then 
                axi_data_V_3_i_i_reg_304 <= s_axis_video_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_i_i_reg_191 assign process. --
    axi_last_V1_i_i_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_i_i_reg_191 <= axi_last_V_3_i_i_reg_292;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_i_i_reg_191 <= tmp_last_V_reg_477;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_i_i_reg_267 assign process. --
    axi_last_V_2_i_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_167) then
                if (ap_sig_bdd_227) then 
                    axi_last_V_2_i_i_reg_267 <= eol_phi_fu_225_p4;
                elsif (ap_sig_bdd_148) then 
                    axi_last_V_2_i_i_reg_267 <= s_axis_video_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_i_i_reg_267 <= ap_reg_phiprechg_axi_last_V_2_i_i_reg_267pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_i_i_reg_292 assign process. --
    axi_last_V_3_i_i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_i_i_reg_292 <= eol_phi_fu_225_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_i_reg_316) and not(ap_sig_bdd_186))) then 
                axi_last_V_3_i_i_reg_292 <= s_axis_video_TLAST;
            end if; 
        end if;
    end process;

    -- eol_2_i_i_reg_316 assign process. --
    eol_2_i_i_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0)))) then 
                eol_2_i_i_reg_316 <= eol_i_i_phi_fu_248_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_i_reg_316) and not(ap_sig_bdd_186))) then 
                eol_2_i_i_reg_316 <= s_axis_video_TLAST;
            end if; 
        end if;
    end process;

    -- eol_i_i_reg_244 assign process. --
    eol_i_i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_i_i_reg_244 <= axi_last_V_2_i_i_reg_267;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then 
                eol_i_i_reg_244 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- eol_reg_222 assign process. --
    eol_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_222 <= axi_last_V_2_i_i_reg_267;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then 
                eol_reg_222 <= axi_last_V1_i_i_reg_191;
            end if; 
        end if;
    end process;

    -- i_i_i_reg_211 assign process. --
    i_i_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                i_i_i_reg_211 <= i_reg_505;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_i_i_reg_211 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- j_i_i_reg_256 assign process. --
    j_i_i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                j_i_i_reg_256 <= j_fu_381_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then 
                j_i_i_reg_256 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_280 assign process. --
    p_Val2_s_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_167) then
                if (ap_sig_bdd_227) then 
                    p_Val2_s_reg_280 <= axi_data_V_1_i_i_phi_fu_236_p4;
                elsif (ap_sig_bdd_148) then 
                    p_Val2_s_reg_280 <= s_axis_video_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_280 <= ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- sof_1_i_i_fu_106 assign process. --
    sof_1_i_i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_i_i_fu_106 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_i_i_fu_106 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond2_i_i_reg_510 <= exitcond2_i_i_fu_376_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_reg_505 <= i_fu_366_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                pix_val_0_V_2_reg_523 <= pix_val_0_V_2_fu_410_p3;
                pix_val_1_V_1_reg_528 <= pix_val_1_V_1_fu_427_p3;
                pix_val_2_V_1_reg_533 <= pix_val_2_V_1_fu_434_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                sel_tmp2_reg_494 <= sel_tmp2_fu_347_p2;
                tmp_34_reg_489 <= tmp_34_fu_344_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((s_axis_video_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_469 <= s_axis_video_TDATA;
                tmp_last_V_reg_477 <= s_axis_video_TLAST;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_91))) then
                tmp_reg_464 <= tmp_fu_336_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, s_axis_video_TVALID, ap_sig_bdd_91, exitcond_i_i_fu_361_p2, exitcond2_i_i_fu_376_p2, ap_sig_bdd_149, ap_reg_ppiten_pp1_it0, ap_sig_bdd_156, ap_reg_ppiten_pp1_it1, ap_sig_bdd_186, eol_2_i_i_reg_316, tmp_user_V_fu_340_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_91)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((s_axis_video_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_340_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((s_axis_video_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_340_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond_i_i_fu_361_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_2_i_i_reg_316) and not(ap_sig_bdd_186))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_186) and not((ap_const_lv1_0 = eol_2_i_i_reg_316)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Height_out_din <= Height;

    -- Height_out_write assign process. --
    Height_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_91)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_91))) then 
            Height_out_write <= ap_const_logic_1;
        else 
            Height_out_write <= ap_const_logic_0;
        end if; 
    end process;

    HwReg_WidthOut_out_din <= HwReg_WidthOut;

    -- HwReg_WidthOut_out_write assign process. --
    HwReg_WidthOut_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_91)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_91))) then 
            HwReg_WidthOut_out_write <= ap_const_logic_1;
        else 
            HwReg_WidthOut_out_write <= ap_const_logic_0;
        end if; 
    end process;

    WidthIn_out_din <= WidthIn;

    -- WidthIn_out_write assign process. --
    WidthIn_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_91)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_91))) then 
            WidthIn_out_write <= ap_const_logic_1;
        else 
            WidthIn_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond_i_i_fu_361_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond_i_i_fu_361_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond_i_i_fu_361_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond_i_i_fu_361_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_i_i_reg_267pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(exitcond2_i_i_fu_376_p2, brmerge_i_i_fu_390_p2)
    begin
                ap_sig_bdd_148 <= ((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_i_fu_390_p2));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(s_axis_video_TVALID, exitcond2_i_i_fu_376_p2, brmerge_i_i_fu_390_p2)
    begin
                ap_sig_bdd_149 <= ((s_axis_video_TVALID = ap_const_logic_0) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_i_fu_390_p2));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(img_V_val_V_full_n, exitcond2_i_i_reg_510)
    begin
                ap_sig_bdd_156 <= ((img_V_val_V_full_n = ap_const_logic_0) and (exitcond2_i_i_reg_510 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_149, ap_reg_ppiten_pp1_it0, ap_sig_bdd_156, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_167 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- ap_sig_bdd_181 assign process. --
    ap_sig_bdd_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_181 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(s_axis_video_TVALID, eol_2_i_i_reg_316)
    begin
                ap_sig_bdd_186 <= ((s_axis_video_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_2_i_i_reg_316));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(exitcond2_i_i_fu_376_p2, brmerge_i_i_fu_390_p2)
    begin
                ap_sig_bdd_227 <= ((exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_i_i_fu_390_p2)));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(exitcond2_i_i_fu_376_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_247 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_start, ap_done_reg, Height_out_full_n, WidthIn_out_full_n, colorMode_out_full_n, HwReg_WidthOut_out_full_n)
    begin
                ap_sig_bdd_91 <= ((Height_out_full_n = ap_const_logic_0) or (WidthIn_out_full_n = ap_const_logic_0) or (colorMode_out_full_n = ap_const_logic_0) or (HwReg_WidthOut_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_181)
    begin
        if (ap_sig_bdd_181) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_i_i_phi_fu_236_p4 assign process. --
    axi_data_V_1_i_i_phi_fu_236_p4_assign_proc : process(axi_data_V_1_i_i_reg_233, p_Val2_s_reg_280, exitcond2_i_i_reg_510, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_i_i_phi_fu_236_p4 <= p_Val2_s_reg_280;
        else 
            axi_data_V_1_i_i_phi_fu_236_p4 <= axi_data_V_1_i_i_reg_233;
        end if; 
    end process;

    brmerge_i_i_fu_390_p2 <= (sof_1_i_i_fu_106 or eol_i_i_phi_fu_248_p4);
    colorMode_out_din <= colorMode;

    -- colorMode_out_write assign process. --
    colorMode_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_91)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_91))) then 
            colorMode_out_write <= ap_const_logic_1;
        else 
            colorMode_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- eol_i_i_phi_fu_248_p4 assign process. --
    eol_i_i_phi_fu_248_p4_assign_proc : process(eol_i_i_reg_244, axi_last_V_2_i_i_reg_267, exitcond2_i_i_reg_510, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_i_i_phi_fu_248_p4 <= axi_last_V_2_i_i_reg_267;
        else 
            eol_i_i_phi_fu_248_p4 <= eol_i_i_reg_244;
        end if; 
    end process;


    -- eol_phi_fu_225_p4 assign process. --
    eol_phi_fu_225_p4_assign_proc : process(eol_reg_222, axi_last_V_2_i_i_reg_267, exitcond2_i_i_reg_510, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_225_p4 <= axi_last_V_2_i_i_reg_267;
        else 
            eol_phi_fu_225_p4 <= eol_reg_222;
        end if; 
    end process;

    exitcond2_i_i_fu_376_p2 <= "1" when (j_cast_i_i_fu_372_p1 = tmp_reg_464) else "0";
    exitcond_i_i_fu_361_p2 <= "1" when (i_cast_i_i_fu_357_p1 = tmp_34_reg_489) else "0";
    i_cast_i_i_fu_357_p1 <= std_logic_vector(resize(unsigned(i_i_i_reg_211),13));
    i_fu_366_p2 <= std_logic_vector(unsigned(i_i_i_reg_211) + unsigned(ap_const_lv12_1));
    img_V_val_V_din <= ((pix_val_2_V_1_reg_533 & pix_val_1_V_1_reg_528) & pix_val_0_V_2_reg_523);

    -- img_V_val_V_write assign process. --
    img_V_val_V_write_assign_proc : process(exitcond2_i_i_reg_510, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_149, ap_reg_ppiten_pp1_it0, ap_sig_bdd_156, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_V_val_V_write <= ap_const_logic_1;
        else 
            img_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_cast_i_i_fu_372_p1 <= std_logic_vector(resize(unsigned(j_i_i_reg_256),13));
    j_fu_381_p2 <= std_logic_vector(unsigned(j_i_i_reg_256) + unsigned(ap_const_lv12_1));

    -- p_Val2_s_phi_fu_284_p4 assign process. --
    p_Val2_s_phi_fu_284_p4_assign_proc : process(s_axis_video_TDATA, brmerge_i_i_fu_390_p2, axi_data_V_1_i_i_phi_fu_236_p4, ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0, ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then
            if (not((ap_const_lv1_0 = brmerge_i_i_fu_390_p2))) then 
                p_Val2_s_phi_fu_284_p4 <= axi_data_V_1_i_i_phi_fu_236_p4;
            elsif ((ap_const_lv1_0 = brmerge_i_i_fu_390_p2)) then 
                p_Val2_s_phi_fu_284_p4 <= s_axis_video_TDATA;
            else 
                p_Val2_s_phi_fu_284_p4 <= ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0;
            end if;
        else 
            p_Val2_s_phi_fu_284_p4 <= ap_reg_phiprechg_p_Val2_s_reg_280pp1_it0;
        end if; 
    end process;

    pix_val_0_V_2_fu_410_p3 <= 
        pix_val_0_V_fu_396_p4 when (sel_tmp2_reg_494(0) = '1') else 
        pix_val_1_V_2_fu_406_p1;
    pix_val_0_V_fu_396_p4 <= p_Val2_s_phi_fu_284_p4(23 downto 16);
    pix_val_1_V_1_fu_427_p3 <= 
        pix_val_1_V_2_fu_406_p1 when (sel_tmp2_reg_494(0) = '1') else 
        pix_val_2_V_fu_417_p4;
    pix_val_1_V_2_fu_406_p1 <= p_Val2_s_phi_fu_284_p4(8 - 1 downto 0);
    pix_val_2_V_1_fu_434_p3 <= 
        pix_val_2_V_fu_417_p4 when (sel_tmp2_reg_494(0) = '1') else 
        pix_val_0_V_fu_396_p4;
    pix_val_2_V_fu_417_p4 <= p_Val2_s_phi_fu_284_p4(15 downto 8);

    -- s_axis_video_TREADY assign process. --
    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond2_i_i_fu_376_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_i_i_fu_390_p2, ap_sig_bdd_149, ap_reg_ppiten_pp1_it0, ap_sig_bdd_156, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_186, eol_2_i_i_reg_316)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((s_axis_video_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_i_reg_316) and not(ap_sig_bdd_186)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_i_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_i_fu_390_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp2_fu_347_p2 <= "1" when (colorMode = ap_const_lv8_0) else "0";
    tmp_34_fu_344_p1 <= Height(13 - 1 downto 0);
    tmp_fu_336_p1 <= WidthIn(13 - 1 downto 0);
    tmp_user_V_fu_340_p1 <= s_axis_video_TUSER;
end behav;
