
// *****************************************************
// Dependencies
// *****************************************************
#include "periphs.h"

// *****************************************************
// Private data
// *****************************************************

// Subcore instantiations
static XGpio         vid_mux_sel_gpio_inst;
static vid_io_intf_t vid_io_intf_inst;
static XVtc          vtd_inst;
static XV_tpg        tpg_old_inst;
static XV_tpg        tpg_new_inst;
static XScaler       scaler_old_inst;
static XVprocSs      scaler_new_inst;
static XAxiVdma      vdma_old_inst;
static XAxiVdma      vdma_new_inst;
static XVtc          vtg_inst;

// *****************************************************
// Private functions
// *****************************************************

// init_drivers() - Initialize drivers for remaining peripherals
//                  and set them to a known power-on state.
//   - p_periphs_inst             - Pointer to object to work on
//   - vid_mux_sel_gpio_device_id - Device ID for GPIO controlling the output video mux
//   - vtd_device_id              - Device ID for Video Timing Detector
//   - tpg_old_device_id          - Device ID for Test Pattern Generator that drives the old Scaler
//   - tpg_new_device_id          - Device ID for Test Pattern Generator that drives the new VPSS-based Scaler
//   - scaler_old_device_id       - Device ID for Scaler v8.1 instance
//   - scaler_new_device_id       - Device ID for VPSS v1.0 Scaler instance
//   - vtg_device_id              - Device ID for Video Timing Generator
//   - return                     - Function status return value (see above)
static int init_drivers
(
	periphs_t*   p_periphs_inst,
	unsigned int vid_mux_sel_gpio_device_id,
	unsigned int vtd_device_id,
	unsigned int tpg_old_device_id,
	unsigned int tpg_new_device_id,
	unsigned int scaler_old_device_id,
	unsigned int scaler_new_device_id,
	unsigned int vdma_old_device_id,
	unsigned int vdma_new_device_id,
	unsigned int vtg_device_id
)
{
	// Local variables
	int              status         = 0;
	XGpio_Config*    p_gpio_cfg;
	XVtc_Config*     p_vtd_cfg;
	XV_tpg_Config*   p_tpg_old_cfg;
	XV_tpg_Config*   p_tpg_new_cfg;
	XScaler_Config*  p_scaler_old_cfg;
	XVprocSs_Config* p_vpss_cfg;
	XAxiVdma_Config* p_vdma_old_cfg;
	XAxiVdma_Config* p_vdma_new_cfg;
	XVtc_Config*     p_vtg_cfg;
	
	// Initialize GPIO drivers
	xil_printf("Initializing GPIO for output video mux.\n\r");
	p_gpio_cfg = XGpio_LookupConfig(vid_mux_sel_gpio_device_id);
	if (p_gpio_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find GPIO for output video mux.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XGpio_Initialize(p_periphs_inst->p_vid_mux_sel_gpio_inst, vid_mux_sel_gpio_device_id);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the GPIO for output video mux.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Initialize VTG drivers
	xil_printf("Initializing VTG.\n\r");
	p_vtg_cfg = XVtc_LookupConfig(vtg_device_id);
	if (p_vtg_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VTG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XVtc_CfgInitialize(p_periphs_inst->p_vtg_inst, p_vtg_cfg, p_vtg_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the VTG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Initialize VDMA drivers
//	xil_printf("Initializing VDMA.\n\r");
//	p_vdma_old_cfg = XAxiVdma_LookupConfig(vdma_old_device_id);
//	if (p_vdma_old_cfg == NULL)
//	{
//		xil_printf("ERROR! Failed to find VDMA.\n\r");
//		return PERIPHS_ERROR_UNKNOWN;
//	}
//
//	status = XAxiVdma_CfgInitialize(p_periphs_inst->p_vdma_old_inst, p_vdma_old_cfg, p_vdma_old_cfg->BaseAddress);
//	if (status != XST_SUCCESS)
//	{
//		xil_printf("ERROR!! Failed to initialize the VDMA.\n\r");
//		return PERIPHS_ERROR_UNKNOWN;
//	}
	
	p_vdma_new_cfg = XAxiVdma_LookupConfig(vdma_new_device_id);
	if (p_vdma_new_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VDMA.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XAxiVdma_CfgInitialize(p_periphs_inst->p_vdma_new_inst, p_vdma_new_cfg, p_vdma_new_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the VDMA.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Initialize Scaler drivers
	xil_printf("Initializing Scaler.\n\r");
	//init_scaler(p_periphs_inst->p_scaler_old_inst, scaler_old_device_id);
	p_scaler_old_cfg = XScaler_LookupConfig(scaler_old_device_id);
	if (p_scaler_old_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find old scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XScaler_CfgInitialize(p_periphs_inst->p_scaler_old_inst, p_scaler_old_cfg, p_scaler_old_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the old Scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	// Initialize VPSS drivers
	xil_printf("Initializing VPSS-based Scaler.\n\r");
	p_vpss_cfg = XVprocSs_LookupConfig(scaler_new_device_id);
	if (p_vpss_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	status = XVprocSs_CfgInitialize(p_periphs_inst->p_scaler_new_inst, p_vpss_cfg, p_vpss_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Initialize VTD drivers
	xil_printf("Initializing VTD.\n\r");
	p_vtd_cfg = XVtc_LookupConfig(vtd_device_id);
	if (p_vtd_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VTD.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	if (periphs_get_fmc_status(p_periphs_inst)) // This function will hang if FMC card is not present. This is because the VTD needs an input video clock to access registers and this function asserts soft reset which causes a hang on AXI Lite interface.
	{
		status = XVtc_CfgInitialize(p_periphs_inst->p_vtd_inst, p_vtd_cfg, p_vtd_cfg->BaseAddress);
		if (status != XST_SUCCESS)
		{
			xil_printf("ERROR! Failed to initialize the VTD.\n\r");
			return PERIPHS_ERROR_UNKNOWN;
		}
	}
	
	// Initialize TPG drivers
	xil_printf("Initializing TPG.\n\r");
	p_tpg_old_cfg = XV_tpg_LookupConfig(tpg_old_device_id);
	if (p_tpg_old_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find TPG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XV_tpg_CfgInitialize(p_periphs_inst->p_tpg_old_inst, p_tpg_old_cfg, p_tpg_old_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the TPG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	p_tpg_new_cfg = XV_tpg_LookupConfig(tpg_new_device_id);
	if (p_tpg_new_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find TPG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	status = XV_tpg_CfgInitialize(p_periphs_inst->p_tpg_new_inst, p_tpg_new_cfg, p_tpg_new_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the TPG.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	return PERIPHS_SUCCESS;
}

// *****************************************************
// Public functions
// *****************************************************
int periphs_init
(
	periphs_t*   p_periphs_inst,
	unsigned int vid_mux_sel_gpio_device_id,
	unsigned int fmc_imageon_iic_base_addr,
	unsigned int si570_iic_device_id,
	unsigned int vtd_device_id,
	unsigned int tpg_old_device_id,
	unsigned int tpg_new_device_id,
	unsigned int scaler_old_device_id,
	unsigned int scaler_new_device_id,
	unsigned int vdma_old_device_id,
	unsigned int vdma_new_device_id,
	unsigned int vtg_device_id,
	unsigned int fb_old_start_addr,
	unsigned int fb_new_start_addr
)
{
	// Local variables
	int status = 0;
	
	// Attach subcore instances to object
	p_periphs_inst->p_vid_mux_sel_gpio_inst = &vid_mux_sel_gpio_inst;
	p_periphs_inst->p_vid_io_intf_inst      = &vid_io_intf_inst;
	p_periphs_inst->p_vtd_inst              = &vtd_inst;
//	p_periphs_inst->p_tpg_old_inst          = &tpg_old_inst;
	p_periphs_inst->p_tpg_new_inst          = &tpg_new_inst;
	p_periphs_inst->p_scaler_old_inst       = &scaler_old_inst;
	p_periphs_inst->p_scaler_new_inst       = &scaler_new_inst;
//	p_periphs_inst->p_vdma_old_inst         = &vdma_old_inst;
	p_periphs_inst->p_vdma_new_inst         = &vdma_new_inst;
	p_periphs_inst->p_vtg_inst              = &vtg_inst;
	
	// Store VDMA framebuffer addresses
	p_periphs_inst->fb_old_start_addr  = fb_old_start_addr;
	p_periphs_inst->fb_new_start_addr  = fb_new_start_addr;
	
	// Initialize Video Input/Output interface
	xil_printf("Initializing Video Input/Output interface.\n\r");
	status = vid_io_intf_init(p_periphs_inst->p_vid_io_intf_inst, fmc_imageon_iic_base_addr, si570_iic_device_id);
	
	// Initialize remaining peripheral drivers
	xil_printf("Initializing remaining peripheral drivers.\n\r");
	status = init_drivers
	(
		p_periphs_inst,
		vid_mux_sel_gpio_device_id,
		vtd_device_id,
		tpg_old_device_id,
		tpg_new_device_id,
		scaler_old_device_id,
		scaler_new_device_id,
		vdma_old_device_id,
		vdma_new_device_id,
		vtg_device_id
	);
	if (status != 0)
	{
		xil_printf("ERROR! Failed to initialize remaining peripheral drivers.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	// Enable TPG by default
	p_periphs_inst->bypass_tpg = 0;

	// Detect/set input size (default to 1080p if no FMC card)
	if (p_periphs_inst->p_vid_io_intf_inst->fmc_imageon_is_present)
	{
		periphs_detect_input_fsize(p_periphs_inst);
	}
	else
	{
		xil_printf("Initialize input to 1080p.\n\r");
		periphs_set_input_fsize(p_periphs_inst, VIDEO_RESOLUTION_1080P);
	}
	
	// Set output frame size (default to 720p)
	xil_printf("Initialize output to 720p.\n\r");
	status = periphs_update_output_fsize(p_periphs_inst, VIDEO_RESOLUTION_720P);
	if (status != 0)
	{
		xil_printf("ERROR! Failed to initialize output frame size.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Select new scaler by default
	xil_printf("Enabling new scaler by default.\n\r");
	periphs_select_scaler(p_periphs_inst, PERIPHS_SEL_NEW_SCALER);
	
	return PERIPHS_SUCCESS;
}

int periphs_get_fmc_status
(
	periphs_t* p_periphs_inst
)
{
	return vid_io_intf_get_fmc_status(p_periphs_inst->p_vid_io_intf_inst);
}

int periphs_detect_input_fsize
(
	periphs_t* p_periphs_inst
)
{
	// Local variables
	int status = 0;
	
	if (!p_periphs_inst->p_vid_io_intf_inst->fmc_imageon_is_present)
	{
		xil_printf("ERROR! FMC card is not present so we can't detect an incoming frame size.\n\r");
		return PERIPHS_ERROR_NO_FMC_CARD;
	}
	
	// Put VTD in reset to hold off partial frames
	vtiming_det_stop(p_periphs_inst->p_vtd_inst);
	
	// Detect input frame size from Video Input/Output interface
	vid_io_intf_detect_input_fsize(p_periphs_inst->p_vid_io_intf_inst);
	
	// Update scaler input frame size
	status = scaler_old_set_input_size
	(
		p_periphs_inst->p_scaler_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_OLD_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the old scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	// Update VPSS input frame size
	status = scaler_new_set_input_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_NEW_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// TPG gets reset, so re-configure it
	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		1, // Box is blue for TPG on old scaler datapath
		0  // print regs
	);

	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		0, // Box is red for TPG on new VPSS scaler datapath
		0  // print regs
	);

	// Enable VTD to start letting video in
	vtiming_det_run(p_periphs_inst->p_vtd_inst);
	
	return PERIPHS_SUCCESS;
}

int periphs_set_input_fsize
(
	periphs_t*   p_periphs_inst,
	unsigned int new_input_timing
)
{
	// Local variables
	int           status = 0;
	vres_timing_t vres_timing;
	
	// Look up timing info from ID
	vres_get_timing(new_input_timing, &vres_timing);

	// Update scaler input frame size
	status = scaler_old_set_input_size
	(
		p_periphs_inst->p_scaler_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_OLD_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the old scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	// Update VPSS input frame size
	status = scaler_new_set_input_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_NEW_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	// TPG gets reset, so re-configure it
	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_old_inst,
		vres_timing.HActiveVideo,
		vres_timing.VActiveVideo,
		p_periphs_inst->bypass_tpg,
		1, // Box is blue for TPG on old scaler datapath
		0  // print regs
	);

	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_new_inst,
		vres_timing.HActiveVideo,
		vres_timing.VActiveVideo,
		p_periphs_inst->bypass_tpg,
		0, // Box is red for TPG on new VPSS scaler datapath
		0  // print regs
	);
	
	return PERIPHS_SUCCESS;
}

int periphs_update_output_fsize
(
	periphs_t*   p_periphs_inst,
	unsigned int new_output_timing
)
{
	// Local variables
	int status = 0;
	
	// Put VTD in reset to hold off partial frames
	if (periphs_get_fmc_status(p_periphs_inst))
	{
		vtiming_det_stop(p_periphs_inst->p_vtd_inst);
	}
	
	// Set output frame size to Video Input/Output interface
	vid_io_intf_update_output_fsize(p_periphs_inst->p_vid_io_intf_inst, new_output_timing);
	
	// Set VTG output timing
	vtiming_gen_run(p_periphs_inst->p_vtg_inst, new_output_timing, 0);
	
	// Set VDMA frame size
	xil_printf("Setting up framebuffers.\n\r");
//	framebuffer_run
//	(
//		p_periphs_inst->p_vdma_old_inst,
//		16, // Bits per pixel
//		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
//		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
//		p_periphs_inst->fb_old_start_addr
//	);
	
	framebuffer_run
	(
		p_periphs_inst->p_vdma_new_inst,
		16, // Bits per pixel
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
		p_periphs_inst->fb_new_start_addr
	);
	
	// Set old Scaler parameters
	xil_printf("Setting up old scaler.\n\r");
	status = scaler_old_set_output_size
	(
		p_periphs_inst->p_scaler_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_OLD_SUCCESS)
	{
		xil_printf("ERROR! Failed to set output size on the old scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// Set new (VPSS-based) Scaler parameters
	xil_printf("Setting up new VPSS-based scaler.\n\r");	
	status = scaler_new_set_output_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_NEW_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}
	
	// TPG gets reset, so re-configure it
	xil_printf("Setting up TPG.\n\r");
	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		1, // Box is blue for TPG on old scaler datapath
		0  // print regs
	);

	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		0, // Box is red for TPG on new VPSS scaler datapath
		0  // print regs
	);
	
	// Enable VTD to start letting video in
	if (periphs_get_fmc_status(p_periphs_inst))
	{
		vtiming_det_run(p_periphs_inst->p_vtd_inst);
	}
	
	return PERIPHS_SUCCESS;
}

void periphs_select_scaler
(
	periphs_t* p_periphs_inst,
	scaler_option_t which_scaler
)
{
	if (which_scaler == PERIPHS_SEL_NEW_SCALER)
	{
		XGpio_DiscreteSet(p_periphs_inst->p_vid_mux_sel_gpio_inst, 1, 1);
	}
	else if (which_scaler == PERIPHS_SEL_OLD_SCALER)
	{
		XGpio_DiscreteClear(p_periphs_inst->p_vid_mux_sel_gpio_inst, 1, 1);
	}
//
}

int periphs_toggle_tpg
(
	periphs_t* p_periphs_inst
)
{
	// Local variables
	int status = 0;

	// TPG always on when no FMC card is present
	if (!periphs_get_fmc_status(p_periphs_inst))
	{
		return PERIPHS_ERROR_NO_FMC_CARD;
	}

	// Determine if we're in TPG or passthrough mode
	if (p_periphs_inst->bypass_tpg == PERIPHS_SEL_ENABLE_TPG)
	{
		p_periphs_inst->bypass_tpg = PERIPHS_SEL_BYPASS_TPG;
	}
	else
	{
		p_periphs_inst->bypass_tpg = PERIPHS_SEL_ENABLE_TPG;
	}

	// Put VTD in reset to hold off partial frames
	vtiming_det_stop(p_periphs_inst->p_vtd_inst);

	// Re-configure the VPSS to cause a reset to the TPG to avoid partial frame issue
	status = scaler_new_set_input_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != SCALER_NEW_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return PERIPHS_ERROR_UNKNOWN;
	}

	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_old_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		1, // Box is blue for TPG on old scaler datapath
		0  // print regs
	);

	test_pattern_gen_run
	(
		p_periphs_inst->p_tpg_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		p_periphs_inst->bypass_tpg,
		0, // Box is red for TPG on new VPSS scaler datapath
		0  // print regs
	);

	// Enable VTD to start letting video in
	vtiming_det_run(p_periphs_inst->p_vtd_inst);
	
	return PERIPHS_SUCCESS;
}

