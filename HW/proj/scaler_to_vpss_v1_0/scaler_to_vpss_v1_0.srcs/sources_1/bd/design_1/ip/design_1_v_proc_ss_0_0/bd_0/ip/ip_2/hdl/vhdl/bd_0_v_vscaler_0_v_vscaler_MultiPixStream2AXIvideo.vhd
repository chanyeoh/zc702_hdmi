-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_0_v_vscaler_0_v_vscaler_MultiPixStream2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    StrmMPix_V_val_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    StrmMPix_V_val_V_empty_n : IN STD_LOGIC;
    StrmMPix_V_val_V_read : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Height : IN STD_LOGIC_VECTOR (11 downto 0);
    WidthOut : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of bd_0_v_vscaler_0_v_vscaler_MultiPixStream2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal j_i_reg_137 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_52 : BOOLEAN;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_reg_232 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_64 : BOOLEAN;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_49_reg_237 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_i_fu_169_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_i_reg_242 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_i_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_251 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_i_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_i_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_sig_ioackin_m_axis_video_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal j_fu_195_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_idle : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_idle : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready : STD_LOGIC;
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_user_V_fu_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_m_axis_video_TREADY : STD_LOGIC := '0';
    signal cols_cast_i_fu_165_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_i_fu_186_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_v_vscaler_reg_unsigned_short_s_fu_148 : component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start,
        ap_done => grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done,
        ap_idle => grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_idle,
        ap_ready => grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready,
        in_r => grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r,
        ap_return => grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return);

    grp_v_vscaler_reg_unsigned_short_s_fu_154 : component bd_0_v_vscaler_0_v_vscaler_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start,
        ap_done => grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done,
        ap_idle => grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_idle,
        ap_ready => grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready,
        in_r => grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r,
        ap_return => grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond3_i_fu_175_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axis_video_TREADY assign process. --
    ap_reg_ioackin_m_axis_video_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
                    ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_103 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_1 = m_axis_video_TREADY)))) then 
                    ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_fu_190_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond3_i_fu_175_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_fu_190_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond3_i_fu_175_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_fu_190_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg assign process. --
    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_52))) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_ready)) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg assign process. --
    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_52))) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_ready)) then 
                    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_reg_126 assign process. --
    i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_fu_190_p2 = ap_const_lv1_0)))) then 
                i_i_reg_126 <= i_reg_251;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) or (ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done))))) then 
                i_i_reg_126 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- j_i_reg_137 assign process. --
    j_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond3_i_fu_175_p2 = ap_const_lv1_0))) then 
                j_i_reg_137 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_fu_190_p2 = ap_const_lv1_0))) then 
                j_i_reg_137 <= j_fu_195_p2;
            end if; 
        end if;
    end process;

    -- tmp_user_V_fu_74 assign process. --
    tmp_user_V_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                tmp_user_V_fu_74 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_52))) then 
                tmp_user_V_fu_74 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_fu_190_p2 = ap_const_lv1_0))) then
                axi_last_V_reg_265 <= axi_last_V_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond4_i_reg_256 <= exitcond4_i_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_reg_251 <= i_fu_180_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) or (ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done))))) then
                tmp_31_i_reg_242 <= tmp_31_i_fu_169_p2;
                tmp_i_49_reg_237 <= grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return;
                tmp_i_reg_232 <= grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_return;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_52, grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done, grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done, exitcond3_i_fu_175_p2, exitcond4_i_fu_190_p2, exitcond4_i_reg_256, ap_reg_ppiten_pp0_it0, ap_sig_bdd_103, ap_sig_ioackin_m_axis_video_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_52)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_done) or (ap_const_logic_0 = grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond3_i_fu_175_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_fu_190_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_fu_190_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- StrmMPix_V_val_V_read assign process. --
    StrmMPix_V_val_V_read_assign_proc : process(exitcond4_i_reg_256, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_sig_bdd_103, ap_sig_ioackin_m_axis_video_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_103 or ((exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            StrmMPix_V_val_V_read <= ap_const_logic_1;
        else 
            StrmMPix_V_val_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond3_i_fu_175_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond3_i_fu_175_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond3_i_fu_175_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond3_i_fu_175_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(StrmMPix_V_val_V_empty_n, exitcond4_i_reg_256)
    begin
                ap_sig_bdd_103 <= ((StrmMPix_V_val_V_empty_n = ap_const_logic_0) and (exitcond4_i_reg_256 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_52 assign process. --
    ap_sig_bdd_52_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_52 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_64 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axis_video_TREADY assign process. --
    ap_sig_ioackin_m_axis_video_TREADY_assign_proc : process(m_axis_video_TREADY, ap_reg_ioackin_m_axis_video_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axis_video_TREADY)) then 
            ap_sig_ioackin_m_axis_video_TREADY <= m_axis_video_TREADY;
        else 
            ap_sig_ioackin_m_axis_video_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    axi_last_V_fu_201_p2 <= "1" when (j_cast_i_fu_186_p1 = tmp_31_i_reg_242) else "0";
    cols_cast_i_fu_165_p1 <= std_logic_vector(resize(unsigned(grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_return),13));
    exitcond3_i_fu_175_p2 <= "1" when (i_i_reg_126 = tmp_i_reg_232) else "0";
    exitcond4_i_fu_190_p2 <= "1" when (j_i_reg_137 = tmp_i_49_reg_237) else "0";
    grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start <= grp_v_vscaler_reg_unsigned_short_s_fu_148_ap_start_ap_start_reg;
    grp_v_vscaler_reg_unsigned_short_s_fu_148_in_r <= Height;
    grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start <= grp_v_vscaler_reg_unsigned_short_s_fu_154_ap_start_ap_start_reg;
    grp_v_vscaler_reg_unsigned_short_s_fu_154_in_r <= WidthOut;
    i_fu_180_p2 <= std_logic_vector(unsigned(i_i_reg_126) + unsigned(ap_const_lv12_1));
    j_cast_i_fu_186_p1 <= std_logic_vector(resize(unsigned(j_i_reg_137),13));
    j_fu_195_p2 <= std_logic_vector(unsigned(j_i_reg_137) + unsigned(ap_const_lv12_1));
    m_axis_video_TDATA <= StrmMPix_V_val_V_dout;
    m_axis_video_TDEST <= ap_const_lv1_0;
    m_axis_video_TID <= ap_const_lv1_0;
    m_axis_video_TKEEP <= ap_const_lv3_7;
    m_axis_video_TLAST <= axi_last_V_reg_265;
    m_axis_video_TSTRB <= ap_const_lv3_0;
    m_axis_video_TUSER <= tmp_user_V_fu_74;

    -- m_axis_video_TVALID assign process. --
    m_axis_video_TVALID_assign_proc : process(exitcond4_i_reg_256, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_sig_bdd_103, ap_reg_ppiten_pp0_it1, ap_reg_ioackin_m_axis_video_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond4_i_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_103 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_0 = ap_reg_ioackin_m_axis_video_TREADY)))) then 
            m_axis_video_TVALID <= ap_const_logic_1;
        else 
            m_axis_video_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_31_i_fu_169_p2 <= std_logic_vector(unsigned(cols_cast_i_fu_165_p1) + unsigned(ap_const_lv13_1FFF));
end behav;
