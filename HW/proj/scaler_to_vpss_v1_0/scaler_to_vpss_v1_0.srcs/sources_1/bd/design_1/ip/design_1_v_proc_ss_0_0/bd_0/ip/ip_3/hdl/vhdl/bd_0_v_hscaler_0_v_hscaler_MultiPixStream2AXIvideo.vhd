-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_0_v_hscaler_0_v_hscaler_MultiPixStream2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    StrmMPix_V_val_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    StrmMPix_V_val_V_empty_n : IN STD_LOGIC;
    StrmMPix_V_val_V_read : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    Height_empty_n : IN STD_LOGIC;
    Height_read : OUT STD_LOGIC;
    WidthOut_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    WidthOut_empty_n : IN STD_LOGIC;
    WidthOut_read : OUT STD_LOGIC;
    ColorMode_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ColorMode_empty_n : IN STD_LOGIC;
    ColorMode_read : OUT STD_LOGIC );
end;


architecture behav of bd_0_v_hscaler_0_v_hscaler_MultiPixStream2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal AXI_video_strm_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_data_in : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_keep_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_keep_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_data_in : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_strb_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal AXI_video_strm_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_strb_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_id_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_dest_V_1_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_dest_V_1_sel : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_load_A : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_load_B : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal mapComp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mapComp_ce0 : STD_LOGIC;
    signal mapComp_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_i_reg_234 : STD_LOGIC_VECTOR (11 downto 0);
    signal Height_read_reg_494 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_474 : BOOLEAN;
    signal tmp_25_fu_245_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_reg_499 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_249_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_reg_504 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_509 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_517 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_490 : BOOLEAN;
    signal exitcond9_i_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_301_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_reg_534 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_i_fu_304_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_50_i_reg_539 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_309_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_reg_544 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_313_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_reg_549 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_317_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_reg_554 : STD_LOGIC_VECTOR (1 downto 0);
    signal map_2_V_1_fu_350_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_516 : BOOLEAN;
    signal map_2_V_3_fu_366_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_5_fu_374_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_529 : BOOLEAN;
    signal ap_sig_bdd_544 : BOOLEAN;
    signal i_1_fu_391_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_578 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_i_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_i_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_558 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_565 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal j_fu_406_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_fu_478_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal map_V_2_i_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_V_1_i_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_4_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_i_reg_223 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_user_V_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_257_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_261_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_fu_253_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_i_cast_fu_287_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal map_0_V_cast_fu_326_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp2_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal map_2_V_fu_336_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_2_fu_358_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_cast_i_fu_382_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_i_fu_397_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal pix_val_0_V_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_fu_425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_fu_435_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_467_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_456_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_445_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component bd_0_v_hscaler_0_v_hscaler_mux_3to1_sel2_8_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bd_0_v_hscaler_0_v_hscaler_MultiPixStream2AXIvideo_mapComp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    mapComp_U : component bd_0_v_hscaler_0_v_hscaler_MultiPixStream2AXIvideo_mapComp
    generic map (
        DataWidth => 2,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mapComp_address0,
        ce0 => mapComp_ce0,
        q0 => mapComp_q0);

    v_hscaler_mux_3to1_sel2_8_1_U112 : component bd_0_v_hscaler_0_v_hscaler_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => pix_val_0_V_fu_421_p1,
        din2 => pix_val_1_V_fu_425_p4,
        din3 => pix_val_2_V_fu_435_p4,
        din4 => tmp_30_reg_544,
        dout => tmp_fu_445_p5);

    v_hscaler_mux_3to1_sel2_8_1_U113 : component bd_0_v_hscaler_0_v_hscaler_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => pix_val_0_V_fu_421_p1,
        din2 => pix_val_1_V_fu_425_p4,
        din3 => pix_val_2_V_fu_435_p4,
        din4 => tmp_31_reg_549,
        dout => tmp_s_fu_456_p5);

    v_hscaler_mux_3to1_sel2_8_1_U114 : component bd_0_v_hscaler_0_v_hscaler_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => pix_val_0_V_fu_421_p1,
        din2 => pix_val_1_V_fu_425_p4,
        din3 => pix_val_2_V_fu_435_p4,
        din4 => tmp_32_reg_554,
        dout => tmp_2_fu_467_p5);





    -- AXI_video_strm_V_data_V_1_sel_rd assign process. --
    AXI_video_strm_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_data_V_1_vld_out))) then 
                                        AXI_video_strm_V_data_V_1_sel_rd <= not(AXI_video_strm_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_data_V_1_sel_wr assign process. --
    AXI_video_strm_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_1_ack_in))) then 
                                        AXI_video_strm_V_data_V_1_sel_wr <= not(AXI_video_strm_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_data_V_1_state assign process. --
    AXI_video_strm_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_data_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_1_ack_out) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_vld_in) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_2)))) then 
                    AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_data_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_out) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_out) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_1)))) then 
                    AXI_video_strm_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_data_V_1_vld_in) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = AXI_video_strm_V_data_V_1_ack_out) and (AXI_video_strm_V_data_V_1_state = ap_const_lv2_1)) or ((AXI_video_strm_V_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = AXI_video_strm_V_data_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_data_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_1_ack_out)))))) then 
                    AXI_video_strm_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_dest_V_1_sel_rd assign process. --
    AXI_video_strm_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_1_vld_out))) then 
                                        AXI_video_strm_V_dest_V_1_sel_rd <= not(AXI_video_strm_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_dest_V_1_sel_wr assign process. --
    AXI_video_strm_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_1_ack_in))) then 
                                        AXI_video_strm_V_dest_V_1_sel_wr <= not(AXI_video_strm_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_dest_V_1_state assign process. --
    AXI_video_strm_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_dest_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_dest_V_1_state)))) then 
                    AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_dest_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_dest_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_dest_V_1_state)))) then 
                    AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_dest_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_dest_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_dest_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_dest_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_1_ack_out)))))) then 
                    AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_id_V_1_sel_rd assign process. --
    AXI_video_strm_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_id_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_id_V_1_vld_out))) then 
                                        AXI_video_strm_V_id_V_1_sel_rd <= not(AXI_video_strm_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_id_V_1_sel_wr assign process. --
    AXI_video_strm_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_id_V_1_ack_in))) then 
                                        AXI_video_strm_V_id_V_1_sel_wr <= not(AXI_video_strm_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_id_V_1_state assign process. --
    AXI_video_strm_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_id_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_id_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_id_V_1_state)))) then 
                    AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_id_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_id_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_id_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_id_V_1_state)))) then 
                    AXI_video_strm_V_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_id_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_id_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_id_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_id_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_id_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_id_V_1_ack_out)))))) then 
                    AXI_video_strm_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_keep_V_1_sel_rd assign process. --
    AXI_video_strm_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_keep_V_1_vld_out))) then 
                                        AXI_video_strm_V_keep_V_1_sel_rd <= not(AXI_video_strm_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_keep_V_1_sel_wr assign process. --
    AXI_video_strm_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_keep_V_1_ack_in))) then 
                                        AXI_video_strm_V_keep_V_1_sel_wr <= not(AXI_video_strm_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_keep_V_1_state assign process. --
    AXI_video_strm_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_keep_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_keep_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_keep_V_1_state)))) then 
                    AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_keep_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_keep_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_keep_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_keep_V_1_state)))) then 
                    AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_keep_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_keep_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_keep_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_keep_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_keep_V_1_ack_out)))))) then 
                    AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_last_V_1_sel_rd assign process. --
    AXI_video_strm_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_last_V_1_vld_out))) then 
                                        AXI_video_strm_V_last_V_1_sel_rd <= not(AXI_video_strm_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_last_V_1_sel_wr assign process. --
    AXI_video_strm_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_1_ack_in))) then 
                                        AXI_video_strm_V_last_V_1_sel_wr <= not(AXI_video_strm_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_last_V_1_state assign process. --
    AXI_video_strm_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_last_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_last_V_1_state)))) then 
                    AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_last_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_last_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_last_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_last_V_1_state)))) then 
                    AXI_video_strm_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_last_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_last_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_last_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_last_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_last_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_1_ack_out)))))) then 
                    AXI_video_strm_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_strb_V_1_sel_rd assign process. --
    AXI_video_strm_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_strb_V_1_vld_out))) then 
                                        AXI_video_strm_V_strb_V_1_sel_rd <= not(AXI_video_strm_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_strb_V_1_sel_wr assign process. --
    AXI_video_strm_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_strb_V_1_ack_in))) then 
                                        AXI_video_strm_V_strb_V_1_sel_wr <= not(AXI_video_strm_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_strb_V_1_state assign process. --
    AXI_video_strm_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_strb_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_strb_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_strb_V_1_state)))) then 
                    AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_strb_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_strb_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_strb_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_strb_V_1_state)))) then 
                    AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_strb_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_strb_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_strb_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_strb_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_strb_V_1_ack_out)))))) then 
                    AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_user_V_1_sel_rd assign process. --
    AXI_video_strm_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_1_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_user_V_1_vld_out))) then 
                                        AXI_video_strm_V_user_V_1_sel_rd <= not(AXI_video_strm_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_user_V_1_sel_wr assign process. --
    AXI_video_strm_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_1_ack_in))) then 
                                        AXI_video_strm_V_user_V_1_sel_wr <= not(AXI_video_strm_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    -- AXI_video_strm_V_user_V_1_state assign process. --
    AXI_video_strm_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_user_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_user_V_1_state)))) then 
                    AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_user_V_1_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_user_V_1_state)) or ((ap_const_logic_0 = AXI_video_strm_V_user_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_user_V_1_state)))) then 
                    AXI_video_strm_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_user_V_1_state)) or ((ap_const_logic_1 = AXI_video_strm_V_user_V_1_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_user_V_1_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_user_V_1_state) and not(((ap_const_logic_1 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_user_V_1_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_1_ack_out)))))) then 
                    AXI_video_strm_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_386_p2)) and not(ap_sig_bdd_544))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond1_i_fu_401_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_386_p2) and not(ap_sig_bdd_544))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (ap_const_lv1_0 = exitcond1_i_fu_401_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_386_p2) and not(ap_sig_bdd_544)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond1_i_fu_401_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_386_p2) and not(ap_sig_bdd_544))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i1_i_reg_223 assign process. --
    i1_i_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond1_i_fu_401_p2)))) then 
                i1_i_reg_223 <= i_1_reg_578;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond9_i_fu_275_p2)))) then 
                i1_i_reg_223 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- i_i_reg_211 assign process. --
    i_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_i_reg_211 <= i_reg_517;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_474))) then 
                i_i_reg_211 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- j_i_reg_234 assign process. --
    j_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_386_p2) and not(ap_sig_bdd_544))) then 
                j_i_reg_234 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (ap_const_lv1_0 = exitcond1_i_fu_401_p2))) then 
                j_i_reg_234 <= j_fu_406_p2;
            end if; 
        end if;
    end process;

    -- tmp_user_V_fu_106 assign process. --
    tmp_user_V_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
                tmp_user_V_fu_106 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond9_i_fu_275_p2)))) then 
                tmp_user_V_fu_106 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_1_load_A)) then
                AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_478_p4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_1_load_B)) then
                AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_478_p4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_load_A)) then
                AXI_video_strm_V_dest_V_1_payload_A <= AXI_video_strm_V_dest_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_load_B)) then
                AXI_video_strm_V_dest_V_1_payload_B <= AXI_video_strm_V_dest_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_id_V_1_load_A)) then
                AXI_video_strm_V_id_V_1_payload_A <= AXI_video_strm_V_id_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_id_V_1_load_B)) then
                AXI_video_strm_V_id_V_1_payload_B <= AXI_video_strm_V_id_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_load_A)) then
                AXI_video_strm_V_keep_V_1_payload_A <= AXI_video_strm_V_keep_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_load_B)) then
                AXI_video_strm_V_keep_V_1_payload_B <= AXI_video_strm_V_keep_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_1_load_A)) then
                AXI_video_strm_V_last_V_1_payload_A <= axi_last_V_reg_592;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_1_load_B)) then
                AXI_video_strm_V_last_V_1_payload_B <= axi_last_V_reg_592;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_load_A)) then
                AXI_video_strm_V_strb_V_1_payload_A <= AXI_video_strm_V_strb_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_load_B)) then
                AXI_video_strm_V_strb_V_1_payload_B <= AXI_video_strm_V_strb_V_1_data_in;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_1_load_A)) then
                AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_106;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_1_load_B)) then
                AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_106;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_474))) then
                Height_read_reg_494 <= Height_dout;
                tmp_25_reg_499 <= tmp_25_fu_245_p1;
                tmp_26_reg_504 <= tmp_26_fu_249_p1;
                tmp_7_reg_509 <= tmp_7_fu_269_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1 <= exitcond1_i_reg_583;
                exitcond1_i_reg_583 <= exitcond1_i_fu_401_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (ap_const_lv1_0 = exitcond1_i_fu_401_p2))) then
                axi_last_V_reg_592 <= axi_last_V_fu_412_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_544))) then
                i_1_reg_578 <= i_1_fu_391_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_reg_517 <= i_fu_281_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                map_2_V_4_reg_199 <= map_2_V_5_fu_374_p3;
                map_V_1_i_reg_187 <= map_2_V_3_fu_366_p3;
                map_V_2_i_reg_175 <= map_2_V_1_fu_350_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond9_i_fu_275_p2)))) then
                tmp_29_reg_534 <= tmp_29_fu_301_p1;
                tmp_30_reg_544 <= tmp_30_fu_309_p1;
                tmp_31_reg_549 <= tmp_31_fu_313_p1;
                tmp_32_reg_554 <= tmp_32_fu_317_p1;
                tmp_50_i_reg_539 <= tmp_50_i_fu_304_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, AXI_video_strm_V_data_V_1_ack_in, ap_sig_bdd_474, exitcond9_i_fu_275_p2, exitcond_i_fu_386_p2, ap_sig_bdd_544, exitcond1_i_fu_401_p2, exitcond1_i_reg_583, ap_reg_ppiten_pp0_it0, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_474)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond9_i_fu_275_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if ((not((ap_const_lv1_0 = exitcond_i_fu_386_p2)) and not(ap_sig_bdd_544))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((ap_const_lv1_0 = exitcond_i_fu_386_p2) and not(ap_sig_bdd_544))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond1_i_fu_401_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond1_i_fu_401_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_1_ack_in <= AXI_video_strm_V_data_V_1_state(1);
    AXI_video_strm_V_data_V_1_ack_out <= m_axis_video_TREADY;

    -- AXI_video_strm_V_data_V_1_data_out assign process. --
    AXI_video_strm_V_data_V_1_data_out_assign_proc : process(AXI_video_strm_V_data_V_1_payload_A, AXI_video_strm_V_data_V_1_payload_B, AXI_video_strm_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_data_V_1_sel)) then 
            AXI_video_strm_V_data_V_1_data_out <= AXI_video_strm_V_data_V_1_payload_B;
        else 
            AXI_video_strm_V_data_V_1_data_out <= AXI_video_strm_V_data_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_data_V_1_load_A <= (AXI_video_strm_V_data_V_1_state_cmp_full and not(AXI_video_strm_V_data_V_1_sel_wr));
    AXI_video_strm_V_data_V_1_load_B <= (AXI_video_strm_V_data_V_1_sel_wr and AXI_video_strm_V_data_V_1_state_cmp_full);
    AXI_video_strm_V_data_V_1_sel <= AXI_video_strm_V_data_V_1_sel_rd;
    AXI_video_strm_V_data_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_data_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_data_V_1_vld_in assign process. --
    AXI_video_strm_V_data_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_data_V_1_vld_out <= AXI_video_strm_V_data_V_1_state(0);
    AXI_video_strm_V_dest_V_1_ack_in <= AXI_video_strm_V_dest_V_1_state(1);
    AXI_video_strm_V_dest_V_1_ack_out <= m_axis_video_TREADY;
    AXI_video_strm_V_dest_V_1_data_in <= ap_const_lv1_0;

    -- AXI_video_strm_V_dest_V_1_data_out assign process. --
    AXI_video_strm_V_dest_V_1_data_out_assign_proc : process(AXI_video_strm_V_dest_V_1_payload_A, AXI_video_strm_V_dest_V_1_payload_B, AXI_video_strm_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_dest_V_1_sel)) then 
            AXI_video_strm_V_dest_V_1_data_out <= AXI_video_strm_V_dest_V_1_payload_B;
        else 
            AXI_video_strm_V_dest_V_1_data_out <= AXI_video_strm_V_dest_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_1_load_A <= (AXI_video_strm_V_dest_V_1_state_cmp_full and not(AXI_video_strm_V_dest_V_1_sel_wr));
    AXI_video_strm_V_dest_V_1_load_B <= (AXI_video_strm_V_dest_V_1_sel_wr and AXI_video_strm_V_dest_V_1_state_cmp_full);
    AXI_video_strm_V_dest_V_1_sel <= AXI_video_strm_V_dest_V_1_sel_rd;
    AXI_video_strm_V_dest_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_dest_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_dest_V_1_vld_in assign process. --
    AXI_video_strm_V_dest_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_1_vld_out <= AXI_video_strm_V_dest_V_1_state(0);
    AXI_video_strm_V_id_V_1_ack_in <= AXI_video_strm_V_id_V_1_state(1);
    AXI_video_strm_V_id_V_1_ack_out <= m_axis_video_TREADY;
    AXI_video_strm_V_id_V_1_data_in <= ap_const_lv1_0;

    -- AXI_video_strm_V_id_V_1_data_out assign process. --
    AXI_video_strm_V_id_V_1_data_out_assign_proc : process(AXI_video_strm_V_id_V_1_payload_A, AXI_video_strm_V_id_V_1_payload_B, AXI_video_strm_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_id_V_1_sel)) then 
            AXI_video_strm_V_id_V_1_data_out <= AXI_video_strm_V_id_V_1_payload_B;
        else 
            AXI_video_strm_V_id_V_1_data_out <= AXI_video_strm_V_id_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_id_V_1_load_A <= (AXI_video_strm_V_id_V_1_state_cmp_full and not(AXI_video_strm_V_id_V_1_sel_wr));
    AXI_video_strm_V_id_V_1_load_B <= (AXI_video_strm_V_id_V_1_sel_wr and AXI_video_strm_V_id_V_1_state_cmp_full);
    AXI_video_strm_V_id_V_1_sel <= AXI_video_strm_V_id_V_1_sel_rd;
    AXI_video_strm_V_id_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_id_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_id_V_1_vld_in assign process. --
    AXI_video_strm_V_id_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_id_V_1_vld_out <= AXI_video_strm_V_id_V_1_state(0);
    AXI_video_strm_V_keep_V_1_ack_in <= AXI_video_strm_V_keep_V_1_state(1);
    AXI_video_strm_V_keep_V_1_ack_out <= m_axis_video_TREADY;
    AXI_video_strm_V_keep_V_1_data_in <= ap_const_lv3_7;

    -- AXI_video_strm_V_keep_V_1_data_out assign process. --
    AXI_video_strm_V_keep_V_1_data_out_assign_proc : process(AXI_video_strm_V_keep_V_1_payload_A, AXI_video_strm_V_keep_V_1_payload_B, AXI_video_strm_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_keep_V_1_sel)) then 
            AXI_video_strm_V_keep_V_1_data_out <= AXI_video_strm_V_keep_V_1_payload_B;
        else 
            AXI_video_strm_V_keep_V_1_data_out <= AXI_video_strm_V_keep_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_keep_V_1_load_A <= (AXI_video_strm_V_keep_V_1_state_cmp_full and not(AXI_video_strm_V_keep_V_1_sel_wr));
    AXI_video_strm_V_keep_V_1_load_B <= (AXI_video_strm_V_keep_V_1_sel_wr and AXI_video_strm_V_keep_V_1_state_cmp_full);
    AXI_video_strm_V_keep_V_1_sel <= AXI_video_strm_V_keep_V_1_sel_rd;
    AXI_video_strm_V_keep_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_keep_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_keep_V_1_vld_in assign process. --
    AXI_video_strm_V_keep_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_keep_V_1_vld_out <= AXI_video_strm_V_keep_V_1_state(0);
    AXI_video_strm_V_last_V_1_ack_in <= AXI_video_strm_V_last_V_1_state(1);
    AXI_video_strm_V_last_V_1_ack_out <= m_axis_video_TREADY;

    -- AXI_video_strm_V_last_V_1_data_out assign process. --
    AXI_video_strm_V_last_V_1_data_out_assign_proc : process(AXI_video_strm_V_last_V_1_payload_A, AXI_video_strm_V_last_V_1_payload_B, AXI_video_strm_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_last_V_1_sel)) then 
            AXI_video_strm_V_last_V_1_data_out <= AXI_video_strm_V_last_V_1_payload_B;
        else 
            AXI_video_strm_V_last_V_1_data_out <= AXI_video_strm_V_last_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_last_V_1_load_A <= (AXI_video_strm_V_last_V_1_state_cmp_full and not(AXI_video_strm_V_last_V_1_sel_wr));
    AXI_video_strm_V_last_V_1_load_B <= (AXI_video_strm_V_last_V_1_sel_wr and AXI_video_strm_V_last_V_1_state_cmp_full);
    AXI_video_strm_V_last_V_1_sel <= AXI_video_strm_V_last_V_1_sel_rd;
    AXI_video_strm_V_last_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_last_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_last_V_1_vld_in assign process. --
    AXI_video_strm_V_last_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_last_V_1_vld_out <= AXI_video_strm_V_last_V_1_state(0);
    AXI_video_strm_V_strb_V_1_ack_in <= AXI_video_strm_V_strb_V_1_state(1);
    AXI_video_strm_V_strb_V_1_ack_out <= m_axis_video_TREADY;
    AXI_video_strm_V_strb_V_1_data_in <= ap_const_lv3_0;

    -- AXI_video_strm_V_strb_V_1_data_out assign process. --
    AXI_video_strm_V_strb_V_1_data_out_assign_proc : process(AXI_video_strm_V_strb_V_1_payload_A, AXI_video_strm_V_strb_V_1_payload_B, AXI_video_strm_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_strb_V_1_sel)) then 
            AXI_video_strm_V_strb_V_1_data_out <= AXI_video_strm_V_strb_V_1_payload_B;
        else 
            AXI_video_strm_V_strb_V_1_data_out <= AXI_video_strm_V_strb_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_strb_V_1_load_A <= (AXI_video_strm_V_strb_V_1_state_cmp_full and not(AXI_video_strm_V_strb_V_1_sel_wr));
    AXI_video_strm_V_strb_V_1_load_B <= (AXI_video_strm_V_strb_V_1_sel_wr and AXI_video_strm_V_strb_V_1_state_cmp_full);
    AXI_video_strm_V_strb_V_1_sel <= AXI_video_strm_V_strb_V_1_sel_rd;
    AXI_video_strm_V_strb_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_strb_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_strb_V_1_vld_in assign process. --
    AXI_video_strm_V_strb_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_strb_V_1_vld_out <= AXI_video_strm_V_strb_V_1_state(0);
    AXI_video_strm_V_user_V_1_ack_in <= AXI_video_strm_V_user_V_1_state(1);
    AXI_video_strm_V_user_V_1_ack_out <= m_axis_video_TREADY;

    -- AXI_video_strm_V_user_V_1_data_out assign process. --
    AXI_video_strm_V_user_V_1_data_out_assign_proc : process(AXI_video_strm_V_user_V_1_payload_A, AXI_video_strm_V_user_V_1_payload_B, AXI_video_strm_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_user_V_1_sel)) then 
            AXI_video_strm_V_user_V_1_data_out <= AXI_video_strm_V_user_V_1_payload_B;
        else 
            AXI_video_strm_V_user_V_1_data_out <= AXI_video_strm_V_user_V_1_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_user_V_1_load_A <= (AXI_video_strm_V_user_V_1_state_cmp_full and not(AXI_video_strm_V_user_V_1_sel_wr));
    AXI_video_strm_V_user_V_1_load_B <= (AXI_video_strm_V_user_V_1_sel_wr and AXI_video_strm_V_user_V_1_state_cmp_full);
    AXI_video_strm_V_user_V_1_sel <= AXI_video_strm_V_user_V_1_sel_rd;
    AXI_video_strm_V_user_V_1_state_cmp_full <= '0' when (AXI_video_strm_V_user_V_1_state = ap_const_lv2_1) else '1';

    -- AXI_video_strm_V_user_V_1_vld_in assign process. --
    AXI_video_strm_V_user_V_1_vld_in_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            AXI_video_strm_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            AXI_video_strm_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_user_V_1_vld_out <= AXI_video_strm_V_user_V_1_state(0);

    -- ColorMode_read assign process. --
    ColorMode_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_474)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_474))) then 
            ColorMode_read <= ap_const_logic_1;
        else 
            ColorMode_read <= ap_const_logic_0;
        end if; 
    end process;


    -- Height_read assign process. --
    Height_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_474)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_474))) then 
            Height_read <= ap_const_logic_1;
        else 
            Height_read <= ap_const_logic_0;
        end if; 
    end process;


    -- StrmMPix_V_val_V_read assign process. --
    StrmMPix_V_val_V_read_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, exitcond1_i_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_sig_bdd_565, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_sig_bdd_565 or ((ap_const_lv1_0 = exitcond1_i_reg_583) and (ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_1_ack_in) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_i_reg_583_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            StrmMPix_V_val_V_read <= ap_const_logic_1;
        else 
            StrmMPix_V_val_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- WidthOut_read assign process. --
    WidthOut_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_474)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_474))) then 
            WidthOut_read <= ap_const_logic_1;
        else 
            WidthOut_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond_i_fu_386_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_544)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_386_p2)) and not(ap_sig_bdd_544)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond_i_fu_386_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_544)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_386_p2)) and not(ap_sig_bdd_544))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_474 assign process. --
    ap_sig_bdd_474_assign_proc : process(ap_start, ap_done_reg, Height_empty_n, WidthOut_empty_n, ColorMode_empty_n)
    begin
                ap_sig_bdd_474 <= ((Height_empty_n = ap_const_logic_0) or (WidthOut_empty_n = ap_const_logic_0) or (ColorMode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_490 assign process. --
    ap_sig_bdd_490_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_490 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_516 assign process. --
    ap_sig_bdd_516_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_516 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_529 assign process. --
    ap_sig_bdd_529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_529 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_544 assign process. --
    ap_sig_bdd_544_assign_proc : process(AXI_video_strm_V_data_V_1_ack_in, AXI_video_strm_V_keep_V_1_ack_in, AXI_video_strm_V_strb_V_1_ack_in, AXI_video_strm_V_user_V_1_ack_in, AXI_video_strm_V_last_V_1_ack_in, AXI_video_strm_V_id_V_1_ack_in, AXI_video_strm_V_dest_V_1_ack_in)
    begin
                ap_sig_bdd_544 <= ((AXI_video_strm_V_data_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_keep_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_strb_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_user_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_last_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_id_V_1_ack_in = ap_const_logic_0) or (AXI_video_strm_V_dest_V_1_ack_in = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_558 assign process. --
    ap_sig_bdd_558_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_558 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_565 assign process. --
    ap_sig_bdd_565_assign_proc : process(StrmMPix_V_val_V_empty_n, exitcond1_i_reg_583)
    begin
                ap_sig_bdd_565 <= ((StrmMPix_V_val_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_i_reg_583));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_558)
    begin
        if (ap_sig_bdd_558) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_490)
    begin
        if (ap_sig_bdd_490) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_516)
    begin
        if (ap_sig_bdd_516) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_529)
    begin
        if (ap_sig_bdd_529) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    axi_last_V_fu_412_p2 <= "1" when (j_i_reg_234 = tmp_50_i_reg_539) else "0";
    exitcond1_i_fu_401_p2 <= "1" when (j_cast_i_fu_397_p1 = tmp_26_reg_504) else "0";
    exitcond9_i_fu_275_p2 <= "1" when (i_i_reg_211 = ap_const_lv2_3) else "0";
    exitcond_i_fu_386_p2 <= "1" when (i1_cast_i_fu_382_p1 = tmp_29_reg_534) else "0";
    i1_cast_i_fu_382_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_223),13));
    i_1_fu_391_p2 <= std_logic_vector(unsigned(i1_i_reg_223) + unsigned(ap_const_lv12_1));
    i_fu_281_p2 <= std_logic_vector(unsigned(i_i_reg_211) + unsigned(ap_const_lv2_1));
    j_cast_i_fu_397_p1 <= std_logic_vector(resize(unsigned(j_i_reg_234),13));
    j_fu_406_p2 <= std_logic_vector(unsigned(j_i_reg_234) + unsigned(ap_const_lv12_1));
    m_axis_video_TDATA <= AXI_video_strm_V_data_V_1_data_out;
    m_axis_video_TDEST <= AXI_video_strm_V_dest_V_1_data_out;
    m_axis_video_TID <= AXI_video_strm_V_id_V_1_data_out;
    m_axis_video_TKEEP <= AXI_video_strm_V_keep_V_1_data_out;
    m_axis_video_TLAST <= AXI_video_strm_V_last_V_1_data_out;
    m_axis_video_TSTRB <= AXI_video_strm_V_strb_V_1_data_out;
    m_axis_video_TUSER <= AXI_video_strm_V_user_V_1_data_out;
    m_axis_video_TVALID <= AXI_video_strm_V_dest_V_1_state(0);
    mapComp_address0 <= tmp_8_cast_fu_296_p1(4 - 1 downto 0);

    -- mapComp_ce0 assign process. --
    mapComp_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mapComp_ce0 <= ap_const_logic_1;
        else 
            mapComp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_0_V_cast_fu_326_p1 <= std_logic_vector(resize(unsigned(mapComp_q0),4));
    map_2_V_1_fu_350_p3 <= 
        map_V_2_i_reg_175 when (sel_tmp2_fu_344_p2(0) = '1') else 
        map_2_V_fu_336_p3;
    map_2_V_2_fu_358_p3 <= 
        map_0_V_cast_fu_326_p1 when (sel_tmp_fu_330_p2(0) = '1') else 
        map_V_1_i_reg_187;
    map_2_V_3_fu_366_p3 <= 
        map_V_1_i_reg_187 when (sel_tmp2_fu_344_p2(0) = '1') else 
        map_2_V_2_fu_358_p3;
    map_2_V_5_fu_374_p3 <= 
        map_0_V_cast_fu_326_p1 when (sel_tmp2_fu_344_p2(0) = '1') else 
        map_2_V_4_reg_199;
    map_2_V_fu_336_p3 <= 
        map_V_2_i_reg_175 when (sel_tmp_fu_330_p2(0) = '1') else 
        map_0_V_cast_fu_326_p1;
    p_shl_cast_fu_261_p3 <= (tmp_28_fu_257_p1 & ap_const_lv2_0);
    pix_val_0_V_fu_421_p1 <= StrmMPix_V_val_V_dout(8 - 1 downto 0);
    pix_val_1_V_fu_425_p4 <= StrmMPix_V_val_V_dout(15 downto 8);
    pix_val_2_V_fu_435_p4 <= StrmMPix_V_val_V_dout(23 downto 16);
    sel_tmp2_fu_344_p2 <= "1" when (i_i_reg_211 = ap_const_lv2_0) else "0";
    sel_tmp_fu_330_p2 <= "1" when (i_i_reg_211 = ap_const_lv2_1) else "0";
    tmp_25_fu_245_p1 <= WidthOut_dout(12 - 1 downto 0);
    tmp_26_fu_249_p1 <= WidthOut_dout(13 - 1 downto 0);
    tmp_27_fu_253_p1 <= ColorMode_dout(5 - 1 downto 0);
    tmp_28_fu_257_p1 <= ColorMode_dout(3 - 1 downto 0);
    tmp_29_fu_301_p1 <= Height_read_reg_494(13 - 1 downto 0);
    tmp_30_fu_309_p1 <= map_2_V_4_reg_199(2 - 1 downto 0);
    tmp_31_fu_313_p1 <= map_V_1_i_reg_187(2 - 1 downto 0);
    tmp_32_fu_317_p1 <= map_V_2_i_reg_175(2 - 1 downto 0);
    tmp_50_i_fu_304_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(tmp_25_reg_499));
    tmp_51_i_cast_fu_287_p1 <= std_logic_vector(resize(unsigned(i_i_reg_211),5));
    tmp_7_fu_269_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_261_p3) - unsigned(tmp_27_fu_253_p1));
        tmp_8_cast_fu_296_p1 <= std_logic_vector(resize(signed(tmp_8_fu_291_p2),64));

    tmp_8_fu_291_p2 <= std_logic_vector(unsigned(tmp_7_reg_509) + unsigned(tmp_51_i_cast_fu_287_p1));
    tmp_data_V_fu_478_p4 <= ((tmp_2_fu_467_p5 & tmp_s_fu_456_p5) & tmp_fu_445_p5);
end behav;
