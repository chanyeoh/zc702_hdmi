/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "framebuffer.h"
#include "vid_io_intf.h"
#include "vtiming_det.h"
#include "vtiming_gen.h"
#include "xvprocss.h"
#include "video_resolution.h"

// *****************************************************
// Object
// *****************************************************
typedef struct periphs
{
	// Datapath peripheral drivers (user should allocate and attach pointers before doing anything else)
	//XGpio*          p_vid_mux_sel_gpio_inst;
	vid_io_intf_t*  p_vid_io_intf_inst;
	XVtc*           p_vtd_inst;
	XVprocSs*       p_scaler_new_inst;
	XAxiVdma*       p_vdma_new_inst;
	XVtc*           p_vtg_inst;

	// Frame buffer addresses
	unsigned int    fb_new_start_addr;
} periphs_t;

// Subcore instantiations
//static XGpio         vid_mux_sel_gpio_inst;
static vid_io_intf_t vid_io_intf_inst;
static XVtc          vtd_inst;
static XVprocSs      scaler_new_inst;
static XAxiVdma      vdma_new_inst;
static XVtc          vtg_inst;


int initHDMI(periphs_t*   p_periphs_inst,
			//unsigned int vid_mux_sel_gpio_device_id,
			unsigned int fmc_imageon_iic_base_addr,
			unsigned int si570_iic_device_id,
			unsigned int vtd_device_id,
			//unsigned int tpg_new_device_id,
			unsigned int scaler_new_device_id,
			unsigned int vdma_new_device_id,
			unsigned int vtg_device_id,
			unsigned int fb_new_start_addr
			);
int initDrivers(
		periphs_t*   p_periphs_inst,
		//unsigned int vid_mux_sel_gpio_device_id,
		unsigned int vtd_device_id,
		//unsigned int tpg_new_device_id,
		unsigned int scaler_new_device_id,
		unsigned int vdma_new_device_id,
		unsigned int vtg_device_id
		);
int periphs_detect_input_fsize(
		periphs_t* p_periphs_inst
	);
int periphs_update_output_fsize
(
	periphs_t*   p_periphs_inst,
	unsigned int new_output_timing
);

#define FRAMEBUFFER_NEW_START_ADDR XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0x20000000

int main()
{
    init_platform();

    periphs_t periphs_inst;

    print("Hello World\n\r");
    initHDMI(&periphs_inst,
    		//XPAR_CONTROL_PATH_AXI_GPIO_0_DEVICE_ID,
    		XPAR_CONTROL_PATH_AXI_IIC_0_BASEADDR,
    		XPAR_XIICPS_0_DEVICE_ID,
    		XPAR_HDMI_IN_PROC_HDMI_IN_VTD_DEVICE_ID,
        	//XPAR_VIDEO_PATH_TPG_NEW_TPG_NEW_DEVICE_ID,
    		XPAR_HDMI_IN_PROC_V_PROC_SS_0_DEVICE_ID,
    		XPAR_HDMI_IN_PROC_AXI_VDMA_NEW_DEVICE_ID,
    		XPAR_HDMI_OUT_VTG_DEVICE_ID,
    		FRAMEBUFFER_NEW_START_ADDR);
    int count = 0;
    while(1){
    	if(count == 999999999){
    		//xil_printf("%x\r\n", *(int *)FRAMEBUFFER_NEW_START_ADDR);
    		memset((void*)buf_base_addr, 0, write_setup_inst.HoriSizeInput * write_setup_inst.VertSizeInput * 3);
    		count =0;
    	}
    	count ++;
    }
    cleanup_platform();
    return 0;
}

int initHDMI(periphs_t*   p_periphs_inst,
//			unsigned int vid_mux_sel_gpio_device_id,
			unsigned int fmc_imageon_iic_base_addr,
			unsigned int si570_iic_device_id,
			unsigned int vtd_device_id,
//			unsigned int tpg_new_device_id,
			unsigned int scaler_new_device_id,
			unsigned int vdma_new_device_id,
			unsigned int vtg_device_id,
			unsigned int fb_new_start_addr
			){
	// Local variables
	int status = 0;

	// Attach subcore instances to object
//	p_periphs_inst->p_vid_mux_sel_gpio_inst = &vid_mux_sel_gpio_inst;
	p_periphs_inst->p_vid_io_intf_inst      = &vid_io_intf_inst;
	p_periphs_inst->p_vtd_inst              = &vtd_inst;
//	p_periphs_inst->p_tpg_new_inst          = &tpg_new_inst;
	p_periphs_inst->p_scaler_new_inst       = &scaler_new_inst;
	p_periphs_inst->p_vdma_new_inst         = &vdma_new_inst;
	p_periphs_inst->p_vtg_inst              = &vtg_inst;

	// Store VDMA framebuffer addresses
	p_periphs_inst->fb_new_start_addr  = fb_new_start_addr;

	// Initialize Video Input/Output interface
	xil_printf("Initializing Video Input/Output interface.\n\r");
	status = vid_io_intf_init(p_periphs_inst->p_vid_io_intf_inst, fmc_imageon_iic_base_addr, si570_iic_device_id);

	// Initialize remaining peripheral drivers
	xil_printf("Initializing remaining peripheral drivers.\n\r");
	status = initDrivers
	(
		p_periphs_inst,
//		vid_mux_sel_gpio_device_id,
		vtd_device_id,
//		tpg_new_device_id,
		scaler_new_device_id,
		vdma_new_device_id,
		vtg_device_id
	);
	if (status != 0)
	{
		xil_printf("ERROR! Failed to initialize remaining peripheral drivers.\n\r");
		return XST_FAILURE;
	}

	// Detect/set input size (default to 1080p if no FMC card)
	if (p_periphs_inst->p_vid_io_intf_inst->fmc_imageon_is_present)
	{
		periphs_detect_input_fsize(p_periphs_inst);
	}
	else
	{
//		xil_printf("Initialize input to 1080p.\n\r");
//		periphs_set_input_fsize(p_periphs_inst, VIDEO_RESOLUTION_1080P);
		xil_printf("ERROR! Failed to retrieve input frame.\n\r");
		return XST_FAILURE;
	}

	// Set output frame size (default to 720p)
	xil_printf("Initialize output to 720p.\n\r");
	status = periphs_update_output_fsize(p_periphs_inst, VIDEO_RESOLUTION_720P);
	if (status != 0)
	{
		xil_printf("ERROR! Failed to initialize output frame size.\n\r");
		return XST_FAILURE;
	}

	// Select new scaler by default
//	xil_printf("Enabling new scaler by default.\n\r");
//	XGpio_DiscreteSet(p_periphs_inst->p_vid_mux_sel_gpio_inst, 1, 1);

	// Put VTD in reset to hold off partial frames
	vtiming_det_stop(p_periphs_inst->p_vtd_inst);

	// Re-configure the VPSS to cause a reset to the TPG to avoid partial frame issue
	status = scaler_new_set_input_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return XST_FAILURE;
	}
//	test_pattern_gen_run
//	(
//		p_periphs_inst->p_tpg_new_inst,
//		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
//		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
//		1, //p_periphs_inst->bypass_tpg,
//		0, // Box is red for TPG on new VPSS scaler datapath
//		0  // print regs
//	);

	// Enable VTD to start letting video in
	vtiming_det_run(p_periphs_inst->p_vtd_inst);


	return XST_SUCCESS;
}

int periphs_update_output_fsize
(
	periphs_t*   p_periphs_inst,
	unsigned int new_output_timing
)
{
	// Local variables
	int status = 0;

	// Put VTD in reset to hold off partial frames
	if (vid_io_intf_get_fmc_status(p_periphs_inst->p_vid_io_intf_inst))
	{
		vtiming_det_stop(p_periphs_inst->p_vtd_inst);
	}

	// Set output frame size to Video Input/Output interface
	vid_io_intf_update_output_fsize(p_periphs_inst->p_vid_io_intf_inst, new_output_timing);

	// Set VTG output timing
	vtiming_gen_run(p_periphs_inst->p_vtg_inst, new_output_timing, 0);
	framebuffer_run
	(
		p_periphs_inst->p_vdma_new_inst,
		16, // Bits per pixel
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
		p_periphs_inst->fb_new_start_addr
	);

	// Set new (VPSS-based) Scaler parameters
	xil_printf("Setting up new VPSS-based scaler.\n\r");
	status = scaler_new_set_output_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_output_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return XST_FAILURE;
	}


	// Enable VTD to start letting video in
	if (vid_io_intf_get_fmc_status(p_periphs_inst->p_vid_io_intf_inst))
	{
		vtiming_det_run(p_periphs_inst->p_vtd_inst);
	}

	return XST_SUCCESS;
}


int periphs_detect_input_fsize
(
	periphs_t* p_periphs_inst
)
{
	// Local variables
	int status = 0;

	if (!p_periphs_inst->p_vid_io_intf_inst->fmc_imageon_is_present)
	{
		xil_printf("ERROR! FMC card is not present so we can't detect an incoming frame size.\n\r");
		return XST_FAILURE;
	}

	// Put VTD in reset to hold off partial frames
	vtiming_det_stop(p_periphs_inst->p_vtd_inst);

	// Detect input frame size from Video Input/Output interface
	vid_io_intf_detect_input_fsize(p_periphs_inst->p_vid_io_intf_inst);

	// Update VPSS input frame size
	status = scaler_new_set_input_size
	(
		p_periphs_inst->p_scaler_new_inst,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->HActiveVideo,
		p_periphs_inst->p_vid_io_intf_inst->p_input_timing_inst->VActiveVideo,
		0 // Print configuration
	);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to set input size on the new VPSS-based scaler.\n\r");
		return XST_FAILURE;
	}

	// Enable VTD to start letting video in
	vtiming_det_run(p_periphs_inst->p_vtd_inst);

	return XST_SUCCESS;
}

int initDrivers(
		periphs_t*   p_periphs_inst,
//		unsigned int vid_mux_sel_gpio_device_id,
		unsigned int vtd_device_id,
//		unsigned int tpg_new_device_id,
		unsigned int scaler_new_device_id,
		unsigned int vdma_new_device_id,
		unsigned int vtg_device_id
		){
	// Local variables
	int              status         = 0;
//	XGpio_Config*    p_gpio_cfg;
	XVtc_Config*     p_vtd_cfg;
//	XV_tpg_Config*   p_tpg_new_cfg;
	XVprocSs_Config* p_vpss_cfg;
	XAxiVdma_Config* p_vdma_new_cfg;
	XVtc_Config*     p_vtg_cfg;

	// Initialize VTG drivers
	xil_printf("Initializing VTG.\n\r");
	p_vtg_cfg = XVtc_LookupConfig(vtg_device_id);
	if (p_vtg_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VTG.\n\r");
		return XST_FAILURE;
	}

	status = XVtc_CfgInitialize(p_periphs_inst->p_vtg_inst, p_vtg_cfg, p_vtg_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the VTG.\n\r");
		return XST_FAILURE;
	}

	// Initialize VDMA drivers
	p_vdma_new_cfg = XAxiVdma_LookupConfig(vdma_new_device_id);
	if (p_vdma_new_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VDMA.\n\r");
		return XST_FAILURE;
	}

	status = XAxiVdma_CfgInitialize(p_periphs_inst->p_vdma_new_inst, p_vdma_new_cfg, p_vdma_new_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize the VDMA.\n\r");
		return XST_FAILURE;
	}

	// Initialize VPSS drivers
	xil_printf("Initializing VPSS-based Scaler.\n\r");
	p_vpss_cfg = XVprocSs_LookupConfig(scaler_new_device_id);
	if (p_vpss_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VPSS-based scaler.\n\r");
		return XST_FAILURE;
	}

	status = XVprocSs_CfgInitialize(p_periphs_inst->p_scaler_new_inst, p_vpss_cfg, p_vpss_cfg->BaseAddress);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Failed to initialize VPSS-based scaler.\n\r");
		return XST_FAILURE;
	}

	// Initialize VTD drivers
	xil_printf("Initializing VTD.\n\r");
	p_vtd_cfg = XVtc_LookupConfig(vtd_device_id);
	if (p_vtd_cfg == NULL)
	{
		xil_printf("ERROR! Failed to find VTD.\n\r");
		return XST_FAILURE;
	}

	if (vid_io_intf_get_fmc_status(p_periphs_inst->p_vid_io_intf_inst)) // This function will hang if FMC card is not present. This is because the VTD needs an input video clock to access registers and this function asserts soft reset which causes a hang on AXI Lite interface.
	{
		status = XVtc_CfgInitialize(p_periphs_inst->p_vtd_inst, p_vtd_cfg, p_vtd_cfg->BaseAddress);
		if (status != XST_SUCCESS)
		{
			xil_printf("ERROR! Failed to initialize the VTD.\n\r");
			return XST_FAILURE;
		}
	}

	return XST_SUCCESS;
}
